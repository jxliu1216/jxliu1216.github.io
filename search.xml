<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux命令之awk</title>
    <url>/2021/10/15/awk/</url>
    <content><![CDATA[<p>awk是Linux中的一个非常强大的数据编辑处理工具，说它是一门编程语言也毫不过分（的确有介绍awk变成语言的书籍）。awk的功能太过于强大，以至于无法对其进行全面的总结。本文目前只总结介绍一些常见的基本功能，在后续的学习过程中，会不断总结更新对awk工具的认识，并更新本文。</p>
<span id="more"></span>
<h3 id="awk简介">1. awk简介</h3>
<p>Linux中的很多命令是将其功能所对应的英文进行缩写而得到的，那么awk这个名字是怎么由来的呢？awk是由该工具的三位创作者（Alfred Aho，Peter Weinberger和Brain Kernighan）的family name的首字母构成。</p>
<p>相比于sed对一整行数据进行处理，awk则是将一整行分解为若干个“数据段”进行处理。其使用方法可以表示如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;condition 1 &#123;action 1&#125; condition 2 &#123;action 2&#125; ...&#x27;</span> filename</span><br></pre></td></tr></table></figure>
<p>根据上述使用方法，我们可以知道：</p>
<ul>
<li>awk可以执行多个处理动作（action）</li>
<li>可以根据不同的条件（condition）执行不同的动作（action）</li>
</ul>
<p>前文说到awk是将每一行分解成若干个数据段进行处理，那么是如何进行数据段分解的呢？awk默认使用空格或者tab作为分割符，当然也可以通过命令指定分割符，有如下两种方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;condition 1 &#123;action 1&#125; condition 2 &#123;action 2&#125; ...&#x27;</span> filename <span class="comment"># 使用:作为分隔符，method 1</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;FS=&quot;:&quot;&#125; contition 1 &#123;action 1&#125; condition 2 &#123;action 2&#125; ...&#x27;</span> filename <span class="comment"># 使用:作为分隔符，method 2</span></span><br></pre></td></tr></table></figure>
<p>那么对数据进行分段后，如何表示每一个分段呢？awk使用$符号加数字来表示每一个分段，$1表示第一个分段，$2表示第二个分段，以此类推。</p>
<h3 id="awk的若干常见用法">2. awk的若干常见用法</h3>
<h4 id="结合print打印相关字段">2.1 结合print打印相关字段</h4>
<p>我们此处以/etc/passwd为例，/etc/passwd文件记录了用户信息，每一行都使用“:”将各个字段隔离开，如果我们只想获取用户名，则可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>BEGIN {FS=":"}用于指定分隔符为“:“，{print $1}表示打印第一个字段，即用户名。也可以打印多个字段，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1 &quot;\t&quot; $3&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>打印第1和第3个字段，并且中间使用tab作为分隔符。</p>
<p>还可以结合grep进行过滤，再用awk筛选相关字段，例如：我想要输出登录shell为/bin/bash的所有用户名，可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="string">&quot;/bin/bash&quot;</span> /etc/passwd | awk awk <span class="string">&#x27;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>cut</title>
    <url>/2021/10/18/cut/</url>
    <content><![CDATA[<p>cut是Linux中的一个重要数据选取工具，cut以“行”单位，从中提取出我们想要的信息。cut命令非常适用于处理格式上非常具有规律的数据。</p>
<span id="more"></span>
<h3 id="指定分隔符">1. 指定分隔符</h3>
<p>通过指定分隔符来选取我们想要的信息是cut命令的第一种用法，命令格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cut -d <span class="string">&quot;分隔符&quot;</span> -f field</span><br></pre></td></tr></table></figure>
<p>通过-d来指定分隔符（<strong>如果不指定，默认的分割符为tab</strong>）,通过-f后添加数字，来选取分割后的第几段内容。以环境变量PATH为例，它是以“:”来分隔每个字段的，我们可以使用cut来截取其中的部分字段。例如：</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211019230857154.png" alt="image-20211019230857154" /><figcaption aria-hidden="true">image-20211019230857154</figcaption>
</figure>
<p>cut是以行为单位进行处理的，即对每一行都进行相同的处理，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> | cut -d <span class="string">&quot; &quot;</span> -f 3</span><br></pre></td></tr></table></figure>
<p>这个示例内容过长，就不截图展示了。</p>
<p>需要注意的是：使用cut命令的时候不建议使用空格符作为分隔符，当有多个连续的空格符时，比较容易出问题。</p>
<h3 id="以字符的形式截取">2. 以字符的形式截取</h3>
<p>cut可以通过-c以字符为单位截取信息，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> | cut -c 12-         <span class="comment"># 截取从第12个字符开始到结尾的所有字符</span></span><br><span class="line">$ <span class="built_in">export</span> | cut -c 10-15       <span class="comment"># 截取第10个字符到第15个字符</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之标准输入流</title>
    <url>/2021/12/04/cin/</url>
    <content><![CDATA[<p>本文主要介绍C++标准输入流的使用，重点介绍cin，cin.get()，cin.getline()的区别和使用。</p>
<span id="more"></span>
<h3 id="标准输入输出流的继承关系">1. 标准输入输出流的继承关系</h3>
<p>C++中输入输出流的继承关系如下图所示（图片来自<a href="http://www.cplusplus.com/reference/ios/">C++ Reference</a>）</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/iostream.gif" /></p>
<p>提取其中的输入流，继承关系如下：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211204151513125.png" /></p>
<p>cin是istream的对象，get()和getline()是istream中的成员函数。</p>
<h3 id="cin">2. cin</h3>
<p>cin是C++中的标准输入流，它是istream类的对象，从字符流（sequence of characters）中读取并解析数据。iostream继承了istream，并且cin对象在头文件&lt;iostream&gt;中声明，因此，在使用cin时，需要包含头文件&lt;iostream&gt;。istream类重载了&gt;&gt;，从而实现对各种类型数据的读取。</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211204161158637.png" /></p>
<p>cin并不是直接从键盘读取输入，而是从缓冲区中读取输入。也就是说，键盘的输入首先会被存储在缓冲区中，而后，cin再从缓冲区中读取数据。cin从缓冲区中读取字符流时，有如下两个特点：</p>
<ol type="1">
<li>若缓冲区开头为空白字符（空格，tab，换行符），cin会自动跳过并丢弃空白字符</li>
<li>若在字符流读取的过程中，遇到数据类型不符或者空白字符（空格，tab，换行），cin会停止字符流的读取，并将已经读取的字符流解释为指定的类型，赋予变量。类型不符的字符和空白字符依然留在缓冲区中，用于下一次的cin读取。</li>
<li>若字符与变量类型不符，cin会结束读取，并返回0。</li>
</ol>
<p>示例程序如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> input;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; input) &#123;</span><br><span class="line">        sum += input;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Last Input is: &quot;</span> &lt;&lt; input &lt;&lt; std::endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sum is: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：  20 30 -100 200z 600</span></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Last Input is: 0</span></span><br><span class="line"><span class="comment">// Sum is: 150</span></span><br></pre></td></tr></table></figure>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211204170428391.png" /></p>
<p>由于cin在读取字符流时，会跳过空白字符，并且遇到空白字符就停止读取，在输入为字符串就会有如下问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str;</span><br><span class="line">    std::cin &gt;&gt; str;</span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：Hello World</span></span><br><span class="line"><span class="comment">// 输出：Hello</span></span><br></pre></td></tr></table></figure>
<p>cin在遇到空格时，就停止了读取，World还在缓冲区中等待下一次的读取。为了解决这种情况，我们可以使用cin.get()或者cin.getline()</p>
<h3 id="cin.get">2. cin.get()</h3>
<p>cin.get()有如下三个功能：</p>
<ul>
<li>读取单个字符</li>
<li>读取C风格字符串</li>
<li>stream buffer</li>
</ul>
<p>其函数原型如下所示：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211204201932050.png" /></p>
<p>使用cin.get()读取单个字符时，有如下两种用法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch1, ch2;</span><br><span class="line">cin.<span class="built_in">get</span>(ch1);      <span class="comment">// 将ch1作为参数</span></span><br><span class="line">ch2 = cin.<span class="built_in">get</span>();   <span class="comment">// ch2获取cin.get()的返回值</span></span><br></pre></td></tr></table></figure>
<p>当读取单个字符时，cin.get()可以读取任意单个字符，包括空格，tab和换行符。</p>
<p>使用cin.get()读取C风格字符串时，需要指定字符串大小n。当读到第n-1个字符，或者遇到结束符时，停止读取。结束符默认为''，也可指定为其他。用法如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 100</span></span><br><span class="line"><span class="keyword">char</span> ch1[SIZE], ch2[SIZE];</span><br><span class="line">cin.<span class="built_in">get</span>(ch1, SIZE);</span><br><span class="line">cin.<span class="built_in">get</span>();    <span class="comment">// 读取留下的结束符，也可以使用cin.get(ch1, SIZE).get()</span></span><br><span class="line">cin.<span class="built_in">get</span>(ch2, SIZE, <span class="string">&#x27;#&#x27;</span>);   <span class="comment">// 读取新的字符串，并指定#为结束符</span></span><br></pre></td></tr></table></figure>
<p>**cin.get(char *s, streamsize n)读取完成后，结束符依然保留在缓冲区中**。因此，在连续读取时，需要使用cin.get()将结束符读取，否则下一次读取时，cin.get(char *s, streamsize n)直接读取到结束符，会认为是空字符串，会将空字符串赋给字符串数组。</p>
<h3 id="cin.getline">3. cin.getline()</h3>
<p>cin.getline()用于读取C风格字符串，其函数原型如下：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211204204043035.png" /></p>
<p>cin.getline()与cin.get()的用法非常相似。不同点在于，<strong>cin.getline()在读取字符串时，会读取结束符，并将结束符丢弃。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 200</span></span><br><span class="line"><span class="keyword">char</span> ch1[SIZE], ch2[SIZE];</span><br><span class="line">cin.<span class="built_in">getline</span>(ch1, SIZE);</span><br><span class="line">cin.<span class="built_in">getline</span>(ch2, SIZE, <span class="string">&#x27;#&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="getline">4. getline()</h3>
<p>getline()可以用于从标准输入流中读取数据值string，其函数原型如下：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211204205653114.png" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str;</span><br><span class="line">    <span class="built_in">getline</span>(std::cin, str);</span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>iostream</tag>
        <tag>cin</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客公式渲染</title>
    <url>/2021/10/25/hexo-equations/</url>
    <content><![CDATA[<p>NexT提供了两个渲染引擎（MathJax和Katex）用来显示公式，本文介绍Hexo NexT主题下配置MathJax进行数学公式渲染。</p>
<span id="more"></span>
<h3 id="安装插件">1. 安装插件</h3>
<p>如果使用MathJax进行公式渲染，需要安装如下两个插件之一：hexo-renderer-pandoc或者hexo-renderer-kramed（不推荐），本文采用hexo-renderer-pandoc，运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save         <span class="comment"># 卸载原有的渲染插件</span></span><br><span class="line">npm install hexo-renderer-pandoc --save           <span class="comment"># 安装hexo-renderer-pandoc插件</span></span><br></pre></td></tr></table></figure>
<p>hexo-renderer-pandoc正常运行还需要安装pandoc软件，软件下载链接如下：<a href="https://github.com/jgm/pandoc/releases">pandoc</a>。安装完成后，重启电脑，使得相关配置生效。</p>
<h3 id="配置">2. 配置</h3>
<p>对next/_config.yml中的math部分进行如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>per_page参数的含义是：是否对每一篇博客都按需进行数学公式渲染。如果设置为false，则默认对每篇博客都进行数学公式渲染。若设置为true，则按需对博客进行数学公式渲染。对于需要开启数学公式渲染的博客，在其Markdown文件的Front-matter部分添加mathjax: true，如下所示：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;!-- This post will render the Math Equations --&gt;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">title: &#x27;Will Render Math&#x27;</span><br><span class="line"><span class="section">mathjax: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>上述两步执行完毕后，执行如下命令，即可正常渲染公式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="注意事项">3. 注意事项</h3>
<ol type="1">
<li>行内数学公式显示（$...$）：在第一个$后和第二个$前，不要有空格，否则无法正常渲染公式。</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用（一）</title>
    <url>/2021/10/23/git_1/</url>
    <content><![CDATA[<p>本文主要记录git中的一些常见概念原理和命令的使用，包含如下内容：</p>
<ul>
<li><a href="#git_init">git仓库初始化</a></li>
<li><a href="#git_add">工作区，暂存区，本地仓库和远程仓库</a></li>
<li><a href="#git_diff">git diff</a></li>
</ul>
<span id="more"></span>
<h3 id="git仓库初始化"><a name="git_init"> 1. git仓库初始化 </a></h3>
<p>构建一个git仓库通常有两种形式，第一种是clone一个已有的git仓库，第二种是将自己的工作目录初始化为一个git仓库。clone一个已有的git仓库可以通过git clone命令加仓库地址来实现，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tensorflow/tensorflow.git</span><br></pre></td></tr></table></figure>
<p>将自己的工作目录初始化为git仓库，通过git init命令实现。首先切换到自己的项目根目录下，然后运行git init命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">&quot;the root dir of your project&quot;</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<p>初始化为git仓库后，项目根目录下会多出一个名为<strong>.git</strong>的影藏文件夹，这个文件夹内记录了关于这个git仓库的所有信息。</p>
<h3 id="工作区暂存区本地仓库和远程仓库"><a name="git_add"> 2. 工作区，暂存区，本地仓库和远程仓库 </a></h3>
<p>工作区，暂存区，本地仓库和远程仓库是git中非常重要的四个概念：</p>
<ul>
<li>工作区（Workspace）：当前工作区域，可以理解为日常编辑工程文件的地方</li>
<li>暂存区（index/stage）：用于临时存放文件的改动情况</li>
<li>本地仓库（Repository）：安全存放数据的地方，这里面包含所有的提交版本的信息，其中HEAD指向最新放入仓库的版本</li>
<li>远程仓库（Remote Repository）：用于托管代码的远程服务器</li>
</ul>
<p>这四者之间关系如下图所示：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/1090617-20181008211557402-232838726.png" alt="img" style="zoom: 67%;" /></p>
<p>git的工作流程一般有如下4步：</p>
<ol type="1">
<li>在工作目录添加或者修改文件</li>
<li>将需要进行版本管理的文件放入暂存区：通过git add命令完成</li>
<li>将暂存区的文件提交至本地仓库：通过git commit命令完成</li>
<li>将本地仓库同步至远程仓库：通过git push命令完成</li>
</ol>
<p>在git工作流程中，一个文件通常具有如下4中状态：</p>
<ul>
<li>Untracked：未跟踪，文件尚未纳入版本管理中，可通过git add变为staged状态</li>
<li>Unmodified：文件已在本地仓库中，但是未被修改，即当前的文件内容与本地仓库中的文件快照中的内容一致。如果对其进行修改，则其变为Modified状态；如果使用git rm移出本地仓库，则变为Untracked状态</li>
<li>Modified：文件被修改了。如果对该文件进行git add，该文件变为staged状态；如果对该文件进行git checkout，则丢弃修改，返回Unmodified状态</li>
<li>Staged：已暂存。执行git commit将修改同步至本地仓库中，文件变为Unmodified状态。执行git reset HEAD [name]取消暂存，文件状态变为Modified。</li>
</ul>
<p>状态变化关系如下图所示：</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/1090617-20181008212040668-1339848607.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>可以使用git status查看文件状态，git status -s可以简略的状态信息，结果如下：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211023162808917.png" alt="image-20211023162808917" style="zoom:80%;" /></p>
<p>其中？表示文件尚未被跟踪，M表示文件已被修改，A表示文件被刚纳入版本管理并且已加入至暂存区。共有两列内容，第一列表示暂存区中的状态，第二列表示工作区中的状态。git_1.md为什么在暂存区和工作区都被显示为已修改呢？这是因为：我对git_1.md文件进行修改了之后，将其加入暂存区，然后又对其进行了修改，所以在暂存区和工作区都显示其为已修改状态。</p>
<h3 id="git-diff"><a name="git_diff">3. git diff </a></h3>
<p>git diff用于比较文件之间的差异，通常有如下几种用法：</p>
<ul>
<li>git diff [filename]：用于比较当前工作区和暂存区之间的差异</li>
<li>git diff --cached [filename]：用于比较暂存区和上一次提交之间的差异</li>
<li>git diff HEAD：查看工作区和暂存区与上一次提交之间的差异</li>
<li>git diff commit1 commit2</li>
</ul>
<p>git diff后的结果如下图所示，下面解释各个部分的含义</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211023003548174.png" alt="image-20211023003548174" /><figcaption aria-hidden="true">image-20211023003548174</figcaption>
</figure>
<p>git diff的输出结果大致可以分为两个部分，第一部分是进行对比的两个文件的基本信息，第二部分是对比的结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff --git a/backup.sh b/backup.sh</span><br></pre></td></tr></table></figure>
<p>这一行的意思是使用git版本的diff进行文件对比，对比的两个文件为a版本的backup.sh（即修改前），和b版本的backup.sh（即修改后）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index 7cf56ad..14ff882 100644</span><br></pre></td></tr></table></figure>
<p>这一行表示的是git哈希值，意思是index区域的7cf56ad对象与工作区域的14ff882对象进行对比，100644代表的含义暂不清楚。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--- a/backup.sh</span><br><span class="line">+++ b/backup.sh</span><br></pre></td></tr></table></figure>
<p>这两行表示对比的两个文件，--- a/backup.sh表示修改前的文件，+++ b/backup.sh表示修改后的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@@ -12,5 +12,6 @@ ...</span><br></pre></td></tr></table></figure>
<p>从这行开始就是对差异信息的总结。两个@<span class="citation" data-cites="之间的数字的意思是">@之间的数字的意思是</span>：原文件从12行开始的5行和目标文件从12行开始的6行存在差异，且差异信息显示在后面：</p>
<ul>
<li>以空格开头的白色的行是两个文件中都有的内容</li>
<li>以-开头的的红色的行是原文件中有的内容</li>
<li>以+开头的绿色的行是目标文件中有的内容</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>线性回归与非线性回归</title>
    <url>/2021/10/24/linear-nonlinear-regression/</url>
    <content><![CDATA[<p>最近在看矩阵分析中的投影矩阵，进而区看了最小二乘法，然后有学习了线性回归和非线性回归，发现和自己的认知不太一样，在这里总结一下线性回归和非线性回归的概念。</p>
<p>线性回归和非线性回归中，线性和非线性的意思并不是用来描述因变量和自变量之间的关系是线性还是非线性的，而是用来描述模型函数与待估计参数之间的关系。我们首先来看非线性回归，明白了非线性回归，自然就知道线性回归的含义了。</p>
<span id="more"></span>
<h3 id="非线性回归">1. 非线性回归</h3>
<p>我们首先来看维基百科中对于非线性回归的定义：</p>
<p>In statistics, <a href="https://en.wikipedia.org/wiki/Nonlinear_regression"><strong>nonlinear regression</strong></a> is a form of regression analysis in which observational data are modeled by a function which is a nonlinear combination of the model parameters and depends on one or more independent variables.</p>
<p>这段话的意思是：非线性回归是采用一个函数模型对观测数据进行建模，并且该函数是由<strong>模型参数的非线性组合</strong>构成的，并且可以通过观测数据（自变量和因变量）对模型参数进行估计。</p>
<p>这里需要注意的是：非线性估计中的非线性指的是模型函数是由<strong>模型参数的非线性组合</strong>构成，而并不是描述函数和自变量之间的关系。</p>
<p>举个例子，我们采用如下的模型：</p>
<p><span class="math display">\[
\mathbf{y} \sim f(\mathbf{x},\mathbf{\beta})
\]</span> 其中，<span class="math inline">\(\mathbf{x}=\{x_1,x_2,\cdots,x_n\}\)</span> 为自变量向量，<span class="math inline">\(\mathbf{y}=\{y_1,y_2,\cdots,y_n\}\)</span>为观测因变量向量，<span class="math inline">\(\mathbf{\beta}=\{\beta_1,\beta_2,\cdots,\beta_n\}\)</span>为模型参数向量。</p>
<p>假设某个模型由一个自变量，和两个参数构成，即： <span class="math display">\[
f(\mathbf{x},\mathbf{\beta})=\frac{\beta_1x}{\beta_2+x}
\]</span> 显然，函数模型<span class="math inline">\(f\)</span>无法表示成模型参数<span class="math inline">\(\beta_1\)</span>和<span class="math inline">\(\beta_2\)</span>的线性组合，因此，这个函数是非线性的。</p>
<h3 id="线性回归">2. 线性回归</h3>
<p>如果我们考虑如下的模型： <span class="math display">\[
f(\mathbf{x},\mathbf{\beta})=\beta_0+\beta_1x_1+\beta_2x_2^2+\cdots+\beta_nx_n^2
\]</span> 这看似是一个非线性函数，但是实际上，函数<span class="math inline">\(f\)</span>对于模型参数<span class="math inline">\(\{\beta_0,\beta_1,\cdots,\beta_n\}\)</span>而言是线性的，即是由<span class="math inline">\(\{\beta_0,\beta_1,\cdots,\beta_n\}\)</span>的线性组合构成的，系数分别为<span class="math inline">\(1,x_1,x_2,\cdots,x_n\)</span>。因此，这个函数是线性的。</p>
<h3 id="总结">3. 总结</h3>
<p>线性还是非线性是要根据分析的目标来决定的，在线性回归和非线性回归中，我们需要求解的是模型参数，因而，线性与非线性描述的是函数模型与模型参数之间的关系，而非因变量与自变量之间的关系。</p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>linear regression</tag>
        <tag>non-linear regression</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加文本字数和阅读时间统计</title>
    <url>/2021/10/10/hexo-word-count/</url>
    <content><![CDATA[<p>给Hexo添加字数统计和阅读时间统计主要涉及到hexo-wordcount，hexo-symbol-count-time和eslint这三个插件的安装，以及相关配置文件的修改。步骤不复杂，按照步骤操作就可以。</p>
<span id="more"></span>
<h3 id="插件安装">1. 插件安装</h3>
<p>实现字数统计和阅读统计涉及到三个插件（hexo-wordcount，hexo-symbols-count-time，eslint），安装命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-wordcount</span> -<span class="literal">-save</span></span><br><span class="line">npm install hexo<span class="literal">-symbols</span><span class="literal">-count</span><span class="literal">-time</span> -<span class="literal">-save</span></span><br><span class="line">npm install eslint -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<h3 id="配置文件设置">2. 配置文件设置</h3>
<p>配置文件涉及到两个，分别是站点配置文件和主题配置文件。站点配置文件为博客根目录下的_config.yml文件，主题配置文件为主题文件夹内的_config.yml文件。</p>
<h4 id="站点配置文件">2.1 站点配置文件</h4>
<p>在站点配置文件中添加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                         <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                            <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span>                  <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span>                     <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>              <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure>
<h4 id="主题配置文件">2.2 主题配置文件</h4>
<p>主题配置文件涉及到两处修改，第一处为symbol_count_time，该处原配置文件中已有，只需按照如下内容修改即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span>          <span class="comment"># 是否另起一行，true表示不和发表时间一行</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>           <span class="comment"># 是否显示文字描述（本文字数，阅读时长）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>         <span class="comment"># 页面底部是否显示文字描述</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                         <span class="comment"># 每个word的平均长度</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>                       <span class="comment"># 每分钟阅读的word</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins</span>                   <span class="comment"># 单位后缀</span></span><br></pre></td></tr></table></figure>
<p>第二处为post_wordcount，此处原配置文件中不包含，可在配置文件最后自行添加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span>                 <span class="comment"># 是否显示文字</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span>                 <span class="comment"># 是否显示字数</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span>                  <span class="comment"># 是否显示阅读时间</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">false</span>               <span class="comment"># 是否显示站点总数</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span>           <span class="comment"># 是否分离</span></span><br></pre></td></tr></table></figure>
<h3 id="效果">3. 效果</h3>
<p>完成全部设置后，效果如下图所示：</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211010215632724.png" alt="image-20211010215632724" /><figcaption aria-hidden="true">image-20211010215632724</figcaption>
</figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Bash Tips</title>
    <url>/2021/10/31/linux-bash-tips/</url>
    <content><![CDATA[<h3 id="单引号双引号反引号">1. 单引号，双引号，反引号</h3>
<p>在Linux变成中，经常使用到单引号（‘），双引号（”）和反引号（`），这三者有什么区别呢？</p>
<p>首先，单引号（‘）和双引号（”）是为了解决Bash变量赋值中的空格问题，利用单引号（‘）和双引号（”）可以给变量赋予包含空格的值。</p>
<ul>
<li><p>单引号（‘）：如果使用单引号（‘），则单引号（‘）中的内容全部原样输出</p></li>
<li><p>双引号（”）：双引号（”）中的内容，大部分都原样输出，但是对于$（变量替换），（转义）和反引号（`）（命令替换）这三个特殊字符除外</p>
<p><strong>注：</strong>（转义）的意思是去掉其后紧跟的元字符或者通配符的特殊意义</p></li>
</ul>
<p>单引号（‘）和双引号（”）的对比如下所示：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211031203556422.png" alt="image-20211031203556422" style="zoom:67%;" /></p>
<ul>
<li><p>反引号（`）的作用是命令替换，用于将命令的输出插入在合适的地方，如上图中的最后所示。但是，当反引号（`）遇到单引号（‘），则失去命令替换的作用，直接原样输出。若是想要在双引号（“）显示单引号，可以使用转移字符进行转义。</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211031204401223.png" alt="image-20211031204401223" style="zoom:67%;" /></p></li>
</ul>
<h3 id="命令替换">2. 命令替换</h3>
<p>命令替换的意思是在一行bash命令中嵌入其他bash命令，从而达到一次得到结果的目的。Linux Bash中可以使用反引号（`）或者$(...)来实现命令替换。</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com//img/20220212215824-2022-02-12.png" /></p>
<p>反引号（`）与$(...)的区别：</p>
<ul>
<li>反引号（`）不可以嵌套，即不能在反引号里再嵌套一层反引号</li>
<li>$()支持嵌套，即可以$($(...))</li>
<li>$()里面还可以再嵌套一层反引号（`）</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之搜索命令</title>
    <url>/2021/10/27/linux-search/</url>
    <content><![CDATA[<p>在使用Linux的时候，文件搜索和过滤是我们经常需要使用的功能。在文件搜索和过滤的过程中，find和grep是使用频率非常高的两个命令。这两个命令的使用过程中涉及到字符串模式匹配，也就是正则表达式。因此，本文首先介绍通配符和正则表达式的概念，然后介绍find和grep命令。</p>
<span id="more"></span>
<h3 id="通配符">1. 通配符</h3>
<p>通配符一般在Linux里用于文件名匹配，它是由shell解析的，比如ls等命令。Linux中常见的通配符如下表所示：</p>
<table>
<colgroup>
<col style="width: 17%" />
<col style="width: 35%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>通配符</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>*</td>
<td>匹配0或者多个字符</td>
<td>a*b表示a与b之间可以任意长度的字符</td>
</tr>
<tr class="even">
<td>?</td>
<td>匹配任意一个字符</td>
<td>a?b表示a与b之间必须有一个字符，可以是任意一个字符</td>
</tr>
<tr class="odd">
<td>[list]</td>
<td>匹配list中的任意一个字符</td>
<td>a[xyz]b表示a与b之间有x，y，z中的一个字符</td>
</tr>
<tr class="even">
<td>[^list]</td>
<td>匹配除list中的任意单一字符</td>
<td>a[^0-9]b表示a与b之间必须有一个字符，但不能是阿拉伯数字</td>
</tr>
<tr class="odd">
<td>[c1-c2]</td>
<td>匹配c1-c2中的任意单一字符</td>
<td>a[0-9]b表示a与b之间必须有一个字符，但必须是阿拉伯数字</td>
</tr>
<tr class="even">
<td>[^c1-c2]</td>
<td>匹配不在c1-c2中的任意字符</td>
<td>a[^0-9]表示a与b之间必须有一个字符，但不能是阿拉伯数字</td>
</tr>
<tr class="odd">
<td>{string1,string2,...}</td>
<td>匹配string1或stirng2或者更多字符串中的一个</td>
<td>a{abc,xyz,123}b，a与b之间是abc，xyz,123之一</td>
</tr>
</tbody>
</table>
<h3 id="正则表达式">2. 正则表达式</h3>
<p>正则表达式是用来处理字符串的，进行过滤和筛选，常用于Linux三剑客grep，sed和awk。正则表达式分为基础正则表达式和扩展正则表达式。扩展正则表达式相对于基础正则表达式，对一些元字符的使用不需要转移，同时也增加了一些元字符。使用扩展正则表达的话，通常需要在命令后添加参数，来表明使用扩展正则表达式进行匹配。</p>
<p>基础正则表达式有如下：</p>
<table>
<thead>
<tr class="header">
<th>正则表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>^</td>
<td>从行首开始匹配</td>
</tr>
<tr class="even">
<td>$</td>
<td>从行尾开始匹配</td>
</tr>
<tr class="odd">
<td>^$</td>
<td>空字符</td>
</tr>
<tr class="even">
<td>.</td>
<td>匹配除换行符外的任意一个字符</td>
</tr>
<tr class="odd">
<td>*</td>
<td>前面的字符出现0次或任意多次</td>
</tr>
<tr class="even">
<td>.*</td>
<td>任意字符串</td>
</tr>
<tr class="odd">
<td>[]</td>
<td>匹配括号中指定的任意一个字符，只匹配一次</td>
</tr>
<tr class="even">
<td>[^]</td>
<td>匹配除括号里的字符之外的任意一个字符</td>
</tr>
<tr class="odd">
<td>[-]</td>
<td>匹配一个范围内的任意一个字符</td>
</tr>
<tr class="even">
<td>\{n\}</td>
<td>前面的字符恰好出现n次</td>
</tr>
<tr class="odd">
<td>\{n,\}</td>
<td>前面的字符出现不少于n次</td>
</tr>
<tr class="even">
<td>\{,n\}</td>
<td>前面的字符出现不多于n次</td>
</tr>
<tr class="odd">
<td>\{n1,n2\}</td>
<td>前面的字符至少出现n1次，至多出现n2次</td>
</tr>
</tbody>
</table>
<p>扩展正则表达式相对与基本正则表达式，多了一些元字符，同时不需要使用。例如：在基本正则表达式中，前面字符出现n次，需要用\{n\}来表示；而在扩展正则表达式中，仅需要使用{n}来表示。扩展表达式可以分为如下几个部分：</p>
<ul>
<li><p><strong>字符匹配</strong></p>
<table>
<thead>
<tr class="header">
<th>正则表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.</td>
<td>匹配任意单个字符</td>
</tr>
<tr class="even">
<td>[]</td>
<td>匹配指定范围内的任意单个字符</td>
</tr>
<tr class="odd">
<td>[^]</td>
<td>匹配指定范围外的任意单个字符</td>
</tr>
</tbody>
</table></li>
<li><p><strong>次数匹配</strong></p>
<table>
<thead>
<tr class="header">
<th>正则表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>*</td>
<td>匹配前面的字符任意次（0次，1次，或多次）</td>
</tr>
<tr class="even">
<td>？</td>
<td>匹配前面的字符0次或1次</td>
</tr>
<tr class="odd">
<td>+</td>
<td>匹配前面的字符1次或者多次</td>
</tr>
<tr class="even">
<td>{m}</td>
<td>匹配前面的字符m次</td>
</tr>
<tr class="odd">
<td>{m, n}</td>
<td>匹配前面的字符至少m次，至多n次</td>
</tr>
<tr class="even">
<td>{m,}</td>
<td>匹配前面的字符至少m次</td>
</tr>
<tr class="odd">
<td>{,n}</td>
<td>匹配前面的字符至多n次</td>
</tr>
</tbody>
</table></li>
<li><p><strong>位置锚定</strong></p>
<table>
<thead>
<tr class="header">
<th>正则表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>^</td>
<td>行首锚定</td>
</tr>
<tr class="even">
<td>$</td>
<td>行尾锚定</td>
</tr>
<tr class="odd">
<td>\&lt;</td>
<td>词首锚定</td>
</tr>
<tr class="even">
<td>\&gt;</td>
<td>词尾锚定</td>
</tr>
</tbody>
</table>
<p>解释一下词首锚定和词尾锚定，这两个是对单词进行操作的。因为正则表达式是对字符串进行处理的，如果一个单词中间有符合模式的字符串，那么就会匹配成功。但是有时候我们是想对单词进行匹配的，这时候就要利用\&lt;和\&gt;了。举个例子：</p>
<p>例如有如下的字符串：testscript script scripttest</p>
<ul>
<li>script：上述三个均能匹配上</li>
<li>\&lt;script：只能匹配scripttest和script</li>
<li>script&gt;：只能匹配testscript和script</li>
<li>\&lt;script\&gt;：只能匹配script</li>
</ul>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211031182453041.png" alt="image-20211031182453041" style="zoom:67%;" /></p></li>
</ul>
<h3 id="find命令">3. find命令</h3>
<p>find命令用来在指定目录下查找文件，会递归的在子目录下进行同样的查找操作。find命令的语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find path -option</span><br></pre></td></tr></table></figure>
<p>其中，path为需要查找的目录，-option为查找条件。find中的查找条件非常多，这里列几个常用的：</p>
<ul>
<li>-name "name"：根据文件名进行查找</li>
<li>-iname "name"：根据文件名进行查找，但是忽略大小写</li>
<li>-type c：根据文件类型进行查找</li>
</ul>
<p>还有很多其他的，就不一一罗列了</p>
<h3 id="grep命令">4. grep命令</h3>
<p>grep命令用于查找文件里符号条件的字符串，如果发现符合条件的字符串，则将文件中包含该字符串的那一行打印出来。grep命令的使用语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep [-options] pattern file/dir</span><br></pre></td></tr></table></figure>
<p>其中pattern为需要匹配的模式，可以使用正则表达式。常用的options有如下：</p>
<ul>
<li>-E：使用扩展正则表达式</li>
<li>-n：显示行号</li>
<li>-v：反向选取，显示不包含匹配样式的行</li>
<li>-q：不显示任何信息</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>通配符</tag>
        <tag>正则表达式</tag>
        <tag>find</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂算法</title>
    <url>/2021/12/05/quick-pow/</url>
    <content><![CDATA[<p>快速幂算法是用来计算<span class="math inline">\(x^n\)</span>的算法，它是分治算法的典型应用之一。</p>
<span id="more"></span>
<h3 id="递归实现">1. 递归实现</h3>
<p><span class="math inline">\(x^n\)</span>即为n个x相乘，可以使用for循环来实现，但是其复杂度为<span class="math inline">\(O(n)\)</span>。考虑计算<span class="math inline">\(x^{100}\)</span>，我们并不需要在计算出<span class="math inline">\(x^{99}\)</span>的基础上乘以<span class="math inline">\(x\)</span>，而是在计算出<span class="math inline">\(x^{50}\)</span>以后，就能得到<span class="math inline">\(x^{100}=x^{50}*x^{50}\)</span>。计算规模从100降至50。对于奇数次方，可以通过补乘以一个x来实现，例如：<span class="math inline">\(x^{25}=x^{12}*x^{12}*x\)</span>。根据上述计算过程，很容易利用递归来实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用递归实现快速幂计算</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">quickPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">double</span> midVal = <span class="built_in">quickPow</span>(x, n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span> ? midVal * midVal : midVal * midVal * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迭代实现">2. 迭代实现</h3>
<p>上述的递归过程实际上将计算规模逐次减半，直到规模为0，按照0到n的视角，实际上完成了下述的计算过程： <span class="math display">\[
x^{1} \rightarrow x^{1} \rightarrow x^{2} \rightarrow x^{4} \rightarrow x^{8} \rightarrow x^{16} \rightarrow \cdots
\]</span> 在计算的过程中，我们会得到<span class="math inline">\(x^{1}, x^{2}, x^{4}, x^{8}, x^{16}, \cdots\)</span>这些值。那么<span class="math inline">\(x^n\)</span>是由这其中的哪些组合相得到的呢？以<span class="math inline">\(x^{56}\)</span>为例，将56化为二进制，<span class="math inline">\((56)_{10}=(111000)_{2}\)</span>，其中3个1所在位置的权重分别为：<span class="math inline">\(2^3=8\)</span>，<span class="math inline">\(2^4=16\)</span>，<span class="math inline">\(2^5=32\)</span>。同时，我们可以发现：<span class="math inline">\(x^{56}=x^{32}*x^{16}*x^{8}\)</span>。因此，我们可以x进行不断的平方，得到<span class="math inline">\(x^{2}, x^{4}, x^{8}, x^{16}, \cdots\)</span>，若n的第i位为1，则将<span class="math inline">\(x^{2^i}\)</span>的计入结果。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用迭代实现快速幂计算</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">quickPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * x;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x;</span><br><span class="line">        n = n / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速幂的应用">3. 快速幂的应用</h3>
<p>这是LeetCode上的第372题（<a href="https://leetcode-cn.com/problems/super-pow/">超级次方</a>），这道题的不同之处在于幂次n是一个非常大的数值，并且是通过数组的方式给出的。例如：幂次是1024，则输入为[1,0,2,4]。因此，我们首先需要将数组转换为实际的数字，设数组为<span class="math inline">\(b=[b_0,b_1,b_2,\cdots,b_{m-1}]\)</span>，则幂次n为： <span class="math display">\[
n=\sum_{i=0}^{m-1}10^{m-1-i}*b_i
\]</span> 根据<span class="math inline">\(a^{x+y}=a^x*a^y\)</span>和<span class="math inline">\(a^{xy}=(a^x)^y\)</span>，可得： <span class="math display">\[
x^n=x^{\sum_{i=0}^{m-1}10^{m-1-i}*b_i}=\prod_{i=0}^{m-1}x^{10^{m-1-i}*b_i}=\prod_{i=0}^{m-1}(x^{10^{m-1-i}})^{b_i}
\]</span> 原题中考虑了结果过大，将结果对1337取了模。如果不考虑这个的话，计算<span class="math inline">\(x^{n}\)</span>的代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算x^n</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">quickPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * x;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x;</span><br><span class="line">        n = n / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">superPow</span><span class="params">(<span class="keyword">double</span> x, vector&lt;<span class="keyword">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        ans = ans * <span class="built_in">quickPow</span>(x, b[i]);</span><br><span class="line">        x = <span class="built_in">quickPow</span>(x, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>math</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令之sed</title>
    <url>/2021/09/26/sed/</url>
    <content><![CDATA[<h3 id="sed简介">1. sed简介</h3>
<p>​ sed是Linux中的流编辑器，与传统的编辑器（如Vim）相比，它没有交互式的界面进行操作，而是通过命令来处理数据流中的数据。sed会对数据做如下操作：</p>
<ol type="1">
<li><p>一次从输入中读取一行数据</p></li>
<li><p>根据提供的命令对数据进行处理（选取，删除，替换，新增）</p></li>
<li><p>将处理后的结果输出至stdout</p></li>
</ol>
<span id="more"></span>
<p>​ sed对一行处理完毕后，会读取下一行并继续进行上述操作，直至将所有的行处理完毕。sed命令的使用格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed options <span class="string">&#x27;actions&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>其中，options为sed命令支持的选项，actions为编辑动作。</p>
<h4 id="options">1.1 options</h4>
<p>sed命令支持的选项和对应的功能如下所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">选项</th>
<th style="text-align: left;">作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">-n</td>
<td style="text-align: left;">silent模式，只有经过sed处理的行会被输出至stdout</td>
</tr>
<tr class="even">
<td style="text-align: center;">-e</td>
<td style="text-align: left;">允许对输入数据应用多条sed命令编辑</td>
</tr>
<tr class="odd">
<td style="text-align: center;">-i</td>
<td style="text-align: left;">用sed修改的结果直接修改读取数据的文件，而不是由屏幕输出</td>
</tr>
<tr class="even">
<td style="text-align: center;">-f</td>
<td style="text-align: left;">从文件中读取编辑命令</td>
</tr>
</tbody>
</table>
<h4 id="actions">1.2 actions</h4>
<p>sed命令支持的编辑动作如下所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">编辑动作</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">a</td>
<td>追加，在当前行后添加一行或多行</td>
</tr>
<tr class="even">
<td style="text-align: center;">c</td>
<td>行替换，用c后面的字符串替换原数据行，可替换多行</td>
</tr>
<tr class="odd">
<td style="text-align: center;">i</td>
<td>插入，在当前行前插入一行或多行</td>
</tr>
<tr class="even">
<td style="text-align: center;">d</td>
<td>删除，删除指定的行</td>
</tr>
<tr class="odd">
<td style="text-align: center;">p</td>
<td>打印，输出指定的行</td>
</tr>
<tr class="even">
<td style="text-align: center;">s</td>
<td>字符串替换，用一个字符串替换另一个字符串</td>
</tr>
</tbody>
</table>
<h4 id="sed寻址方式">1.3 sed寻址方式</h4>
<p>在默认情况下，sed命令会对所有行进行相同的操作，但是，某些时候，我们只想对输入数据的部分行进行操作，这个时候则需要进行寻址。sed命令支持两种寻址方式：</p>
<ul>
<li>以数字形式表示行区间</li>
<li>用文本模式进行匹配过滤</li>
</ul>
<p><strong>A. 以数字形式表示行区间</strong></p>
<p>我们可以使用数字来指定处理的行，可以是指定特定的某一行，也可以是指定某个行区间。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印第三行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;3p&#x27;</span> file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第三到五行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;3,5p&#x27;</span> file.txt</span><br></pre></td></tr></table></figure>
<p>指定行区间，则是用起始行号，逗号以及结尾行号来表示一定区间范围内的行。需要注意的是，sed中对于行的编号是从1开始的。</p>
<p><strong>B.以文本模式进行匹配过滤</strong></p>
<p>sed命令也允许指定文本模式来过滤出命令要作用的行，格式如下：/pattern/actions。sed命令会过滤出包含pattern的行，并用actions对这些行进行处理</p>
<p>例如，只想打印出/etc/passwd文件中包含/bin/bash的行，则可以使用如下的sed命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/\/bin\/bash/p&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>当然，使用grep命令可以更简单的实现相同的效果。此处，举这个例子来演示sed命令的文本匹配过滤功能。</p>
<h3 id="sed之打印p">2. sed之打印(p)</h3>
<p>sed进行打印时，常与-n一同使用，只打印符号条件的行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;2p&#x27;</span> test.txt           <span class="comment"># 打印第2行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;2,4p&#x27;</span> test.txt         <span class="comment"># 打印第2到4行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;/hello/p&#x27;</span> test.txt     <span class="comment"># 打印包含hello的行</span></span><br></pre></td></tr></table></figure>
<h3 id="sed之追加a插入i删除d">3. sed之追加(a)，插入(i)，删除(d)</h3>
<p>使用a进行追加时，可以追加1行，也可以使用“  ”追加多行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2a hello world&#x27;</span> test.txt      <span class="comment"># 在第2行后添加一行hello world</span></span><br><span class="line">$ sed <span class="string">&#x27;2a hello\</span></span><br><span class="line"><span class="string">&gt; world&#x27;</span> test.txt                    <span class="comment"># 在第二行后添加2行，分别为hello和world</span></span><br></pre></td></tr></table></figure>
<p>i的用法与a的用法类似，不同的是i是在指定的行前进行插入，a是在指定的行后追加。</p>
<p>d可以用来删除指定的某一行，或者某个范围内的行，或者使用模式进行匹配删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2d&#x27;</span> test.txt                 <span class="comment"># 删除第2行</span></span><br><span class="line">$ sed <span class="string">&#x27;3,5d&#x27;</span> test.txt               <span class="comment"># 删除第3到5行</span></span><br><span class="line">$ sed <span class="string">&#x27;/hello/d&#x27;</span> test.txt           <span class="comment"># 删除匹配到hello的行</span></span><br></pre></td></tr></table></figure>
<h3 id="sed之行替换c">4. sed之行替换(c)</h3>
<p>使用c可以对指定的行进行替换，可以替换一行，也可以替换多行，替换的内容可以是一行，也可以是多行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2c hello world&#x27;</span> test.txt          <span class="comment"># 将第2行替换为hello world</span></span><br><span class="line">$ sed <span class="string">&#x27;2,3c hello world&#x27;</span> test.txt        <span class="comment"># 将第2到第3行替换为hello world</span></span><br><span class="line">$ sed <span class="string">&#x27;2,3c hello world1\</span></span><br><span class="line"><span class="string">&gt; hello world2&#x27;</span> test.txt                 <span class="comment"># 将第2到3行替换为两行内容</span></span><br><span class="line">$ sed <span class="string">&#x27;/hello/c c_hello&#x27;</span> test.txt        <span class="comment"># 对包含hello的行进行替换</span></span><br></pre></td></tr></table></figure>
<h3 id="sed之字符串替换s">5. sed之字符串替换(s)</h3>
<p>使用s进行字符串替换时的格式如下：s/pattern/replacement/flags</p>
<p>有4中可用的标记（flag），作用分别如下：</p>
<ul>
<li>数字：表明新文本将替换第几处模式匹配的地方</li>
<li>g：表明新文本将会替换所有匹配的文本</li>
<li>p：表明将进行了替换操作的行打印出来</li>
<li>w：将行替换的结果写到文件中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/test/trail/2&#x27;</span> test.txt     <span class="comment"># 只替换每行第2次匹配到的文本</span></span><br><span class="line">$ sed <span class="string">&#x27;s/test/trail/g&#x27;</span> test.txt     <span class="comment"># 替换所有匹配到的文本</span></span><br><span class="line">$ sed -n <span class="string">&#x27;s/test/trail/p&#x27;</span> test.txt  <span class="comment"># 将被替换的行打印出来</span></span><br><span class="line">$ sed <span class="string">&#x27;s/test/trail/w result.txt&#x27;</span> test.txt <span class="comment"># 将行替换的结果写入文件</span></span><br></pre></td></tr></table></figure>
<p>注意：可以将上述flags进行组合使用，达到效果的叠加。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令之tar</title>
    <url>/2021/10/10/tar/</url>
    <content><![CDATA[<p>tar命令可以将多个文件和目录打包成一个大的文件，并结合gzip/bzip2进行压缩。本文首先介绍常用的压缩命令，然后介绍tar命令。</p>
<span id="more"></span>
<h3 id="常用压缩命令">1.常用压缩命令</h3>
<p>Linux上的压缩命令非常多，不同的压缩命令对应不同的扩展名。因此，需要知道常见的扩展名所对应的压缩命令，才能使用相应的压缩命令对其进行解压缩。</p>
<table>
<thead>
<tr class="header">
<th>扩展名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.gz</td>
<td>gzip程序的压缩文件</td>
</tr>
<tr class="even">
<td>.bz2</td>
<td>bzip2程序的压缩文件</td>
</tr>
<tr class="odd">
<td>.tar</td>
<td>tar程序的打包文件，并没有经过压缩</td>
</tr>
<tr class="even">
<td>.tar.gz</td>
<td>tar程序的打包文件，并经过gzip的压缩</td>
</tr>
<tr class="odd">
<td>.tar.bz2</td>
<td>tar程序的打包文件，并经过bzip2的压缩</td>
</tr>
</tbody>
</table>
<h4 id="gzip">1.1 gzip</h4>
<p>gzip命令的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip [-cdtv<span class="comment">#] filename</span></span><br></pre></td></tr></table></figure>
<p>各个选项的含义如下：</p>
<ul>
<li>-c：将压缩后的数据输出的屏幕上，可以结合重定向进行使用</li>
<li>-d：解压缩</li>
<li>-t：校验压缩文件是否正确无误</li>
<li>-v：对文件进行压缩，并显示压缩比</li>
<li>-#：通过数字指定压缩等级，-1最快，但是压缩比最低；-9最慢，但是压缩比最高。默认为6</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip test.txt             <span class="comment"># 压缩test.txt，并生成test.txt.gz</span></span><br><span class="line">$ gzip -c test.txt          <span class="comment"># 输出test.txt压缩后的信息，并不产生test.txt.gz</span></span><br><span class="line">$ gzip -d test.txt.gz       <span class="comment"># 解压test.txt.gz</span></span><br><span class="line">$ gzip -v test.txt          <span class="comment"># 对test.txt进行压缩，并显示压缩比</span></span><br><span class="line">$ gzip -9 test.txt          <span class="comment"># 以压缩等级9对test.txt进行压缩</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，使用gzip对文件压缩或者解压缩时，均不会保留原文件或者压缩文件，如果想要保留原始文件，可以结合-c选项和重定向，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip -c test.txt &gt; test.txt.gz  <span class="comment"># 将屏幕输出重定向至test.txt.gz，从而保留原文件 </span></span><br><span class="line">$ gzip -<span class="built_in">cd</span> test.txt.gz &gt; test.txt <span class="comment"># 将解压信息重定向至test.txt，从而保留原文件</span></span><br></pre></td></tr></table></figure>
<p>上述选项也可结合使用，实现综合功能，如：</p>
<ul>
<li><p>比较不同压缩等级下的压缩比</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip -cv1 test.txt     <span class="comment"># 显示压缩信息和压缩等级，并不产生压缩文件</span></span><br><span class="line">$ gzip -cv9 test.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<p>需要注意的是，gzip是对单个文件的压缩，并不能对整个目录进行压缩。虽然可以通过-r选项来对目录进行操作，但这也只是对目录里的文件分别进行压缩。</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211010163234547.png" alt="image-20211010163234547" /><figcaption aria-hidden="true">image-20211010163234547</figcaption>
</figure>
<h4 id="bzip2">1.2 bzip2</h4>
<p>bzip2的用法几乎与gzip相同，bzip2命令的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bzip2 [-cdkzv$] filename</span><br></pre></td></tr></table></figure>
<p>各个选项的作用如下：</p>
<ul>
<li>-c：将压缩过程产生的数据输出至屏幕上</li>
<li>-d：解压缩</li>
<li>-k：保留原文件</li>
<li>-z：压缩的参数</li>
<li>-v：显示压缩比信息</li>
<li>-#：与gzip相同，压缩参数，1最快，9压缩比最高</li>
</ul>
<p>相比gzip，bzip2提供了-k选项，在压缩文件的同时，可以保留原文件。当然也可以使用-c选项和重定向来实现，不过这显得有些麻烦了。</p>
<p>和gzip一样，bzip2也仅能对单个文件进行压缩，而无法对多个文件或者文件夹进行压缩。</p>
<h3 id="tar命令">2. tar命令</h3>
<p>tar是Linux中的归档命令，用于打包多个文件，并且可以结合压缩命令进行使用，tar命令的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar [-j|-z] [cv] [-f new_filename] object1 object2 ...    <span class="comment"># 压缩</span></span><br><span class="line">$ tar [-j|-z] [tv] [-f new_filename]         <span class="comment"># 查看文件名</span></span><br><span class="line">$ tar [-j|-z] [xv] [-f new_filename] [-C folder]            <span class="comment"># 解压</span></span><br></pre></td></tr></table></figure>
<p>这些常用选项的作用如下：</p>
<ul>
<li>-c：新建打包文件，结合-v可以查看打包过程中的文件</li>
<li>-t：查看打包文件中包含的文件名，结合-v可以显示文件的详细信息</li>
<li>-x：解打包或者解压缩，注意：-c，-t，-x不可能在命令中同时出现</li>
<li>-j：通过bzip2的支持进行压缩和解压缩，此时文件扩展名为*.tar.bz2</li>
<li>-z：通过gzip的支持进行压缩和解压缩，此时文件扩展名为*.tar.gz</li>
<li>-f：后面跟打包文件的名字，建议单独出来写</li>
<li>-C：指定解打包的目录</li>
</ul>
<p>实际比较常用的打包，查看和解打包涉及到的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -jcv -f all_test.tar.bz2 <span class="built_in">test</span>*.txt      <span class="comment"># 使用bzip2进行压缩</span></span><br><span class="line">$ tar -zcv -f all_test.tar.gz <span class="built_in">test</span>*.txt       <span class="comment"># 使用gzip进行压缩</span></span><br><span class="line">$ tar -jtv -f all_test.tar.bz2                <span class="comment"># 查看打包文件名</span></span><br><span class="line">$ tar -ztv -f all_test.tar.gz                 <span class="comment"># 查看打包文件名</span></span><br><span class="line">$ tar -jxv -f all_test.tar.bz2                <span class="comment"># 解打包*.tar.bz2</span></span><br><span class="line">$ tar -zxv -f all_test.tar.gz                 <span class="comment"># 解打包*.tar.gz</span></span><br><span class="line">$ tar -zxv -f all_test.tar.gz -C target_folder/    <span class="comment"># 指定目录解打包</span></span><br></pre></td></tr></table></figure>
<p>tar还有两个比较常用的功能：</p>
<ul>
<li><p>解打包某一个文件</p>
<p>使用上述的解打包命令时，会把所有的文件都解出来，但有时候我们可能只需要其中的某个文件，这时候可以指定需要的文件，用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -jxv -f filename.tar.bz2 -C targer_folder file1</span><br></pre></td></tr></table></figure>
<p>其中，filename.tar.bz2为需要解打包的文件，file1为需要的目标文件，targer_folder为目标目录。</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211010174744834.png" alt="image-20211010174744834" /><figcaption aria-hidden="true">image-20211010174744834</figcaption>
</figure></li>
<li><p>打包时，排除某些文件</p>
<p>可以使用--exclude来排除不需要打包的文件，示例如下：</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211010175823219.png" alt="image-20211010175823219" /><figcaption aria-hidden="true">image-20211010175823219</figcaption>
</figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>STL容器之vector</title>
    <url>/2021/11/15/vector/</url>
    <content><![CDATA[<h3 id="vector">1. Vector</h3>
<p>vector的函数原型如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> allocator&lt;T&gt; &gt; <span class="class"><span class="keyword">class</span> <span class="title">vector</span>;</span></span><br></pre></td></tr></table></figure>
<p>vector可以采用如下方式进行声明：</p>
<span id="more"></span>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; value1;                  <span class="comment">// 仅声明，不设置大小和初值</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; value2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;      <span class="comment">// 声明，并赋指定初值</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">value3</span><span class="params">(<span class="number">100</span>)</span></span>;             <span class="comment">// value的大小为100，元素数值初始为0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">value4</span><span class="params">(<span class="number">100</span>, <span class="number">5</span>)</span></span>;          <span class="comment">// value的大小为100，元素全部初始化为5</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">value5</span><span class="params">(value2)</span></span>;          <span class="comment">// 声明，并使用一个已经存在的vector赋初值</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">value6</span><span class="params">(value4.begin(), value4.end())</span></span>;   <span class="comment">// 声明，使用迭代器赋初值</span></span><br></pre></td></tr></table></figure>
<p>vector是一个大小可变的序列化容器，它使用连续的存储空间，因此，可以使用相对于起始位置的偏移量来访问元素。vector常用的成员函数如下：</p>
<table>
<thead>
<tr class="header">
<th>成员函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>size()</td>
<td>返回vector中的元素个数</td>
</tr>
<tr class="even">
<td>capacity()</td>
<td>返回vector的容量</td>
</tr>
<tr class="odd">
<td>resize()</td>
<td>变更vector中的元素格式</td>
</tr>
<tr class="even">
<td>reserve()</td>
<td>变更vector的容量</td>
</tr>
<tr class="odd">
<td>empty()</td>
<td>检测vector是否为空，1为空，0为非空</td>
</tr>
<tr class="even">
<td>push_back()</td>
<td>在末尾插入元素</td>
</tr>
<tr class="odd">
<td>pop_back()</td>
<td>删除末尾的元素</td>
</tr>
<tr class="even">
<td>insert()</td>
<td>在指定pos插入元素</td>
</tr>
<tr class="odd">
<td>erase()</td>
<td>删除指定pos的元素</td>
</tr>
<tr class="even">
<td>clear()</td>
<td>删除vector中的所有元素</td>
</tr>
<tr class="odd">
<td>begin()</td>
<td>返回指向vector开头的迭代器</td>
</tr>
<tr class="even">
<td>end()</td>
<td>返回指向vector末尾的迭代器</td>
</tr>
</tbody>
</table>
<h3 id="sizecapacityresize和reserve">2. size()，capacity()，resize()和reserve()</h3>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211115223606494.png" alt="image-20211115223606494" /><figcaption aria-hidden="true">image-20211115223606494</figcaption>
</figure>
<p>vector在进行空间分配时，可能会分配多余的空间以适应元素数量的动态变化。因此，vector的空间可以分为两个部分，一部分是已存储元素占用的空间，size()返回的就是这部分元素的数量；另一部分是未用空间，capacity()返回的是整个vector的容量（即已用空间和未用空间加在一起可以存储的元素数量）。</p>
<p>resize()改变的是元素数量，reserve()改变的是vector的总容量</p>
<p>示例如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resizing vector</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::vector&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some initial content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++) myvector.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">  myvector.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">  myvector.<span class="built_in">resize</span>(<span class="number">8</span>,<span class="number">100</span>);</span><br><span class="line">  myvector.<span class="built_in">resize</span>(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;myvector contains:&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;myvector.<span class="built_in">size</span>();i++)</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myvector[i];</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的程序的运行结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0</span><br></pre></td></tr></table></figure>
<h3 id="vector的动态扩容机制">3. vector的动态扩容机制</h3>
<p>在添加新元素时，如果vector的空间大小不足，<strong>则会使用一个固定的系数（&gt;1）乘以当前空间大小配置一块较大的空间，然后将原空间内容拷贝过来，在新空间的末尾添加新元素，并释放原空间。</strong></p>
<p>（注：一般情况下，在vector末尾插入元素的时间复杂度为常数级，但是当超出vector的容量时，情况有一些特殊。）</p>
<p>可以通过如下代码验证：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(i);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;size = &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;; capacity = &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下图所示：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211115225818428.png" alt="image-20211115225818428" style="zoom: 80%;" /></p>
<p>从上图可以发现，vector以比例系数为2进行动态扩容。</p>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟内存空间分布</title>
    <url>/2021/11/13/virtual-mem/</url>
    <content><![CDATA[<p>虚拟内存可以为正在运行的进程提供独立的内存空间，使得每一个进程都认为自己独立拥有全部的内存。Linux虚拟内存空间分布如下图所示，其中处于高地址的1G空间为内核空间，剩余的3GB为用户空间。</p>
<span id="more"></span>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/1458743340-5ddbcaa6525a5_articlex.png" /></p>
<p>用户空间从低地址空间到高地址空间包含如下5个部分：</p>
<ul>
<li>代码段（text segment）：存放程序的可执行二进制代码</li>
<li>数据段（data segment）：存放程序中已经初始化且初值不为0的全局变量和静态局部变量，数据段属于静态内存分配</li>
<li>BSS段：存放未初始化的全局变量和静态局部变量；初值为0的全局变量和静态局部变量</li>
<li>堆（heap）：用于存放程序运行时动态分配的内存段，可动态扩张或者缩减</li>
<li>栈（stack）：由编译器自动分配释放，它存放如下信息：
<ol type="1">
<li>函数内部声明的非静态局部变量</li>
<li>记录函数调用过程的相关维护信息（成为栈帧）</li>
</ol></li>
<li>内存映射段（mmap）：内核将硬盘文件直接映射到内存，是一种高效的文件I/O方式</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>内存管理</tag>
        <tag>虚拟内存</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数据流重定向</title>
    <url>/2021/10/12/%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h3 id="数据流">1.数据流</h3>
<p>Linux中涉及到的数据流有如下三个：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">设备</th>
<th style="text-align: center;">设备文件名</th>
<th style="text-align: center;">文件描述符</th>
<th style="text-align: center;">类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">键盘</td>
<td style="text-align: center;">/dev/stdin</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">标准输入</td>
</tr>
<tr class="even">
<td style="text-align: center;">显示器</td>
<td style="text-align: center;">/dev/stdout</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">标准输出</td>
</tr>
<tr class="odd">
<td style="text-align: center;">显示器</td>
<td style="text-align: center;">/dev/stderr</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">错误标准输出</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h3 id="输出重定向">2. 输出重定向</h3>
<p>输出重定向实在Linux中使用较多的，可以将其理解为将标准输出（包括标准输出和标准错误输出）存入一个文件中，而不是显示在屏幕上。这样有什么作用呢？比如我们执行一个bash脚本，我们可能无法实时在屏幕前看脚本的输出，或者脚本的输出很多，我们一时也看不过来。这个时候就可以使用输出重定向，将脚本执行过程中的输出记录至文件中。脚本执行结束后，直接去查看记录文件中的内容，就可以知道脚本的执行情况。</p>
<p>输出重定向使用分为标准输出重定向和标准错误输出重定向，标准输出重定向使用&gt;或者&gt;&gt;，标准错误输出使用2&gt;或者2&gt;&gt;，分别对应如下4种情况：</p>
<ul>
<li>&gt;：以覆盖的方式将标准输出存放至指定的文件或设备</li>
<li>&gt;&gt;：以追加的方式将标准输出存放至指定的文件或设备</li>
<li>2&gt;：以覆盖的方式将标准错误输出存放至指定的文件或设备</li>
<li>2&gt;&gt;：以追加的方式将标准错误输出存放至指定的文件或设备</li>
</ul>
<h4 id="技巧1将stdout和stderr输出至不同的文件">2.1 技巧1：将stdout和stderr输出至不同的文件</h4>
<p>有时候我们不知道一条命令的执行结果是正确的还是错误的，这个时候我们可以将stdout和stderr分别重定向至不同的文件中，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home -name .bashrc &gt; list_right 2&gt; list_error</span><br></pre></td></tr></table></figure>
<h4 id="技巧2将stdout和stderr输出至同一个文件">2.2 技巧2：将stdout和stderr输出至同一个文件</h4>
<p>stdin和stderr输出至不同的文件一方面查看不方便，另一方面也无法体现出输出的先后顺序，可以将这二者输出至同一个文件中，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home -name .bashrc &gt; <span class="built_in">log</span> 2&gt;&amp;1     <span class="comment"># 方法1</span></span><br><span class="line">$ find /home -name .bashrc &amp;&gt;             <span class="comment"># 方法2</span></span><br></pre></td></tr></table></figure>
<h4 id="技巧3devnull">2.3 技巧3：/dev/null</h4>
<p>有时我们知道错误会发生，但是想将它忽略，这时候黑洞设备/dev/null就很重要了，/dev/null会吃掉任何导向至这个设备的信息，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home -name .bashrc 2&gt; /dev/null       <span class="comment"># 将错误信息丢弃 </span></span><br></pre></td></tr></table></figure>
<h3 id="输入重定向">3. 输入重定向</h3>
<p>输入重定向可以理解为将原来需要由键盘进行输入的数据改由文件输入，使用&lt;，如法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt; file</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统相关概念</title>
    <url>/2022/02/13/os-concepts/</url>
    <content><![CDATA[<p>本篇博客记录在学习操作系统过程中，总结的一些概念和相关知识点。</p>
<span id="more"></span>
<h3 id="用户态和内核态">1.用户态和内核态</h3>
<p>用户态运行的是用户程序，而内核态下运行的是操作系统程序。从特权级的角度来说，内核态运行在0级特权级（最高特权级），用户态应用程序运行在3级特权级（最低特权级）。</p>
<p>CPU的保护环如下图所示：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com//img/20220215225710-2022-02-15.png" width="40%"></p>
<p>那么操作系统是如何区分内核态和用户态的呢？这就涉及到CPL，DPL和RPL，以及CPU硬件实现的相关知识了。我们知道一条指令是通过CS:IP来进行取指的，</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com//img/20220213165004-2022-02-13.png" width="40%"></p>
<p>由用户态进入内核态通常有三种方式：</p>
<ul>
<li><p><strong>系统调用：</strong> 这是用户态进程主动要求切换到内核态的一种方式，用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作。系统调用的核心是通过中断来实现的，Linux中将0x80中断分配给系统调用。</p></li>
<li><p><strong>异常：</strong> 当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。</p></li>
<li><p><strong>外围设备中断：</strong> 当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号。</p></li>
</ul>
<p>这三种方式是由用户态进入内核态的最主要方式。其中，系统调用可以认为是用户进程主要发起的，异常和外围设备中断则是被动的。从中断的角度来看，系统调用和异常可以认为是软中断，而外围设备中断则可以认为是硬中断。</p>
]]></content>
      <categories>
        <category>operating system</category>
      </categories>
      <tags>
        <tag>operating system</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++函数调用分析</title>
    <url>/2022/03/04/func-call/</url>
    <content><![CDATA[<p>本文记录C/C++中函数调用的栈帧变化过程。</p>
<h3 id="相关寄存器">1.相关寄存器</h3>
<p>x86_64中的常见寄存器和位数如下两幅图所示。</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com//img/Intel_x86寄存器用途-2022-03-04.jpeg" /></p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com//img/x86-64寄存器位数-2022-03-04.png" /></p>
<p>从图中可以看出64位是向前兼容32位，16位和8位寄存器的。</p>
<h2 id="相关汇编指令">2.相关汇编指令</h2>
<p>分析函数调用过程中的栈帧变化主要涉及到mov，push，pop，call，ret，leave这几条汇编指令，这几条指令的作用如下表所示</p>
<table>
<thead>
<tr class="header">
<th>汇编指令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>mov</td>
<td>移动指令</td>
</tr>
<tr class="even">
<td>push</td>
<td>入栈指令</td>
</tr>
<tr class="odd">
<td>pop</td>
<td>出站指令</td>
</tr>
<tr class="even">
<td>call</td>
<td>函数调用指令</td>
</tr>
<tr class="odd">
<td>ret</td>
<td>返回指令</td>
</tr>
<tr class="even">
<td>leave</td>
<td>返回指令</td>
</tr>
</tbody>
</table>
<p>有时候会在指令后面加上后缀，表明操作数的大小。常见的后缀有b，w，l，q，分别表示操作数大小位1字节，2字节，4字节，8字节。</p>
<p><strong>call指令</strong></p>
<p>call指令虽然是一条函数调用指令，但实际上它包含两步。第一步：将函数的返回地址入栈，即将函数调用后的第一条指令地址入栈；第二步：将被调用函数的地址装载入rip，从而跳转到被调函数。</p>
<p><strong>ret指令</strong></p>
<p>当执行ret指令时，rsp指向的栈顶被弹出值rip，完成被调函数返回</p>
<p><strong>leave指令</strong></p>
<p>leave指令是将栈顶指针指向帧指针，然后POP备份的原帧指针到%rbp，相当于如下两条指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov %rbp %rsp</span><br><span class="line">pop %rbp</span><br></pre></td></tr></table></figure>
<h2 id="代码分析">3.代码分析</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> num3, <span class="keyword">int</span> num4, <span class="keyword">int</span> num5, <span class="keyword">int</span> num6, <span class="keyword">int</span> num7, <span class="keyword">int</span> num8)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    ans = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对其进行编译后，然后进行反汇编，得到对应的反汇编文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc func_call.c -o func_call</span><br><span class="line">$ objdump -d func_call &gt; func_call.txt</span><br></pre></td></tr></table></figure>
<p>涉及到的相关核心部分如下所示：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com//img/20220305203907-2022-03-05.png" /></p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com//img/20220304235301-2022-03-04.png" /></p>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>C++关键字</title>
    <url>/2021/12/21/keywords_cpp/</url>
    <content><![CDATA[<h3 id="sizeof">1. sizeof</h3>
<p><strong>作用：</strong>统计数据类型所占内存大小 <strong>语法：</strong>sizeof(数据类型 / 变量)</p>
<h3 id="const">2. const</h3>
<p><strong>const修饰普通变量</strong></p>
<p>使用cosnt修饰普通变量意味着该变量在后续的使用中是不可以被修改的（即只读的）。<strong>因此，在使用const修饰普通变量时，必须要对其进行初始化。</strong></p>
<p><strong>const修饰指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量指针：指针的指向可以修改，指针指向的值不可以修改</span></span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p1 = &amp;a;</span><br><span class="line">p1 = &amp;b;   <span class="comment">// 正确，指针指向可以修改</span></span><br><span class="line">*p1 = <span class="number">1000</span>;   <span class="comment">// 错误，指针指向的值不可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针常量：指针的指向不可以修改，指针指向的值可以修改</span></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">p2 = &amp;b;     <span class="comment">// 错误，指针的指向不可以修改</span></span><br><span class="line">*p2 = <span class="number">2000</span>;  <span class="comment">// 正确，指针指向的值可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量指针&amp;指针常量：指针的指向和指针指向的值均不可以修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p3 = &amp;a;</span><br></pre></td></tr></table></figure>
<p><strong>const修饰引用</strong></p>
<p>使用const修饰引用后，就无法使用引用来修改被引用对象的值。因此，常引用的作用就是防止被引用对象被错误修改。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = a;    <span class="comment">// b为a的常引用</span></span><br><span class="line">b = <span class="number">50</span>;    <span class="comment">// 错误，b为常引用，不能修改</span></span><br><span class="line">a = <span class="number">50</span>;    <span class="comment">// 修改被引用对象a后，引用b的值也会改变</span></span><br></pre></td></tr></table></figure>
<p><strong>cosnt与#define的区别</strong></p>
<ul>
<li>#define为宏定义，在预处理阶段进行处理，是简单的替换，没有类型检查</li>
<li>const在编译阶段进行处理，会进行类型检查</li>
</ul>
<h3 id="constexpr">3. constexpr</h3>
<p>constexpr表明被修饰的对象是在编译阶段就可以被确定的，而const仅能保障被修饰的对象在运行阶段不被修改。由于constexpr表示被其修饰的对象在编译器就是能确定下来的常量，计算该对象所依赖的东西同样在编译器就能确定下来。</p>
<p><strong>constexpr修饰变量</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> b = a + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> c = num + <span class="number">10</span>;    <span class="comment">// 错误，num并不是常量，不能用来初始化c</span></span><br></pre></td></tr></table></figure>
<p><strong>constexpr修饰指针</strong></p>
<p>使用constexpr修饰指针时，该指针指向的对象必须有固定的地址，即在编译阶段即可确定地址。需要注意的是，constexpr修饰的是指针本省，只能放在最前面。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">int</span> * p = &amp;num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>constexpr修饰函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">int</span> a = <span class="built_in">sum</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">int</span> c = <span class="built_in">sum</span>(b);    <span class="comment">// 错误，b不是常量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nullptr">4. nullptr</h3>
<p>空指针，可以用于指针的初始化，但是不可对其访问（nullptr实际上就是0，内存0为操作系统占用内存，应用程序无权限访问）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="literal">nullptr</span>;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;      <span class="comment">// 输出0</span></span><br><span class="line">*p = <span class="number">100</span>;    <span class="comment">// 报错，Linux平台显示Segmentation Fault</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>对于创建的指针变量，必须对其进行初始化，可以使用nullptr对指针变量进行初始化。</p>
<h3 id="extern">5. extern</h3>
<p><strong>修饰变量</strong></p>
<p>extern可以用来修饰变量。例如：要在b.c中使用a.c中定义变量，则可以在b.c中使用extern。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.c</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> num;   <span class="comment">// 表明num已经在其他源文件中有过定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的时，并不是所有变量都可以在其他源文件中使用extern进行引用。能够被引用的变量一定是具有外部链接性的，外部链接性可以理解为要能够被别的源文件“看到”。因此，全局变量通常可以在别的源文件中使用extern进行应用，而局部变量和static修饰的变量通常无法在别的文件中使用extern进行引用。</p>
<p><strong>修饰函数</strong></p>
<p>除了修饰变量，extern还可以用来修饰函数。extern修饰函数和修饰变量类似，可以通过使用extern使用另外一个源文件中定义的函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.c</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">func1</span>();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用头文件包含同样可以实现在别的源文件调用，那和extern有什么区别呢？使用头文件包含的话，有预处理的过程，而使用extern的话，需要使用哪个函数就引用哪个函数。在大型软件开发过程中，这种编译效率上的差异是非常明显的。</p>
<p><strong>extern "C"</strong></p>
<p>在C＋＋中调用C库函数，就需要在C＋＋程序中用extern “C”声明要引用的函数。</p>
]]></content>
      <categories>
        <category>keywords</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++随笔记录</title>
    <url>/2022/02/22/otherthings-cpp/</url>
    <content><![CDATA[<h3 id="一维数组名的作用">1.一维数组名的作用</h3>
<ul>
<li>对数组名进行sizeof()，可以获得整个数组占用的内存空间大小。再除以元素占用的内存空间大小，即可获得数组中的元素个数。</li>
<li>数组名是数组占用内存空间的首地址，也是第一个元素所在的内存地址</li>
</ul>
<h3 id="二维数组名的作用">2. 二维数组名的作用</h3>
<ul>
<li>对数组名进行sizeof()，可以获得二位数组占用的内存空间大小，再除以元素占用的内存空间大小，即可获得二位数组中的元素个数</li>
<li>数组名是二维数组占用内存空间的首地址</li>
<li>数组名加上行号，可以获得每一行占用内存空间的首地址；取sizeof()，可以获得一行占用的内存空间</li>
</ul>
<p>zhi'xiangzhixiang</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>c_arg</title>
    <url>/2022/03/05/c-arg/</url>
    <content><![CDATA[
]]></content>
  </entry>
</search>
