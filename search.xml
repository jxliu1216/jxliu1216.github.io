<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux命令之awk</title>
    <url>/2021/10/15/awk/</url>
    <content><![CDATA[<p>awk是Linux中的一个非常强大的数据编辑处理工具，说它是一门编程语言也毫不过分（的确有介绍awk变成语言的书籍）。awk的功能太过于强大，以至于无法对其进行全面的总结。本文目前只总结介绍一些常见的基本功能，在后续的学习过程中，会不断总结更新对awk工具的认识，并更新本文。</p>
<span id="more"></span>
<h3 id="awk简介">1. awk简介</h3>
<p>Linux中的很多命令是将其功能所对应的英文进行缩写而得到的，那么awk这个名字是怎么由来的呢？awk是由该工具的三位创作者（Alfred Aho，Peter Weinberger和Brain Kernighan）的family name的首字母构成。</p>
<p>相比于sed对一整行数据进行处理，awk则是将一整行分解为若干个“数据段”进行处理。其使用方法可以表示如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;condition 1 &#123;action 1&#125; condition 2 &#123;action 2&#125; ...&#x27;</span> filename</span><br></pre></td></tr></table></figure>
<p>根据上述使用方法，我们可以知道：</p>
<ul>
<li>awk可以执行多个处理动作（action）</li>
<li>可以根据不同的条件（condition）执行不同的动作（action）</li>
</ul>
<p>前文说到awk是将每一行分解成若干个数据段进行处理，那么是如何进行数据段分解的呢？awk默认使用空格或者tab作为分割符，当然也可以通过命令指定分割符，有如下两种方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;condition 1 &#123;action 1&#125; condition 2 &#123;action 2&#125; ...&#x27;</span> filename <span class="comment"># 使用:作为分隔符，method 1</span></span><br><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;FS=&quot;:&quot;&#125; contition 1 &#123;action 1&#125; condition 2 &#123;action 2&#125; ...&#x27;</span> filename <span class="comment"># 使用:作为分隔符，method 2</span></span><br></pre></td></tr></table></figure>
<p>那么对数据进行分段后，如何表示每一个分段呢？awk使用$符号加数字来表示每一个分段，$1表示第一个分段，$2表示第二个分段，以此类推。</p>
<h3 id="awk的若干常见用法">2. awk的若干常见用法</h3>
<h4 id="结合print打印相关字段">2.1 结合print打印相关字段</h4>
<p>我们此处以/etc/passwd为例，/etc/passwd文件记录了用户信息，每一行都使用“:”将各个字段隔离开，如果我们只想获取用户名，则可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>BEGIN {FS=":"}用于指定分隔符为“:“，{print $1}表示打印第一个字段，即用户名。也可以打印多个字段，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1 &quot;\t&quot; $3&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>打印第1和第3个字段，并且中间使用tab作为分隔符。</p>
<p>还可以结合grep进行过滤，再用awk筛选相关字段，例如：我想要输出登录shell为/bin/bash的所有用户名，可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="string">&quot;/bin/bash&quot;</span> /etc/passwd | awk awk <span class="string">&#x27;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>cut</title>
    <url>/2021/10/18/cut/</url>
    <content><![CDATA[<p>cut是Linux中的一个重要数据选取工具，cut以“行”单位，从中提取出我们想要的信息。cut命令非常适用于处理格式上非常具有规律的数据。</p>
<span id="more"></span>
<h3 id="指定分隔符">1. 指定分隔符</h3>
<p>通过指定分隔符来选取我们想要的信息是cut命令的第一种用法，命令格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cut -d <span class="string">&quot;分隔符&quot;</span> -f field</span><br></pre></td></tr></table></figure>
<p>通过-d来指定分隔符（<strong>如果不指定，默认的分割符为tab</strong>）,通过-f后添加数字，来选取分割后的第几段内容。以环境变量PATH为例，它是以“:”来分隔每个字段的，我们可以使用cut来截取其中的部分字段。例如：</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211019230857154.png" alt="image-20211019230857154" /><figcaption aria-hidden="true">image-20211019230857154</figcaption>
</figure>
<p>cut是以行为单位进行处理的，即对每一行都进行相同的处理，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> | cut -d <span class="string">&quot; &quot;</span> -f 3</span><br></pre></td></tr></table></figure>
<p>这个示例内容过长，就不截图展示了。</p>
<p>需要注意的是：使用cut命令的时候不建议使用空格符作为分隔符，当有多个连续的空格符时，比较容易出问题。</p>
<h3 id="以字符的形式截取">2. 以字符的形式截取</h3>
<p>cut可以通过-c以字符为单位截取信息，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> | cut -c 12-         <span class="comment"># 截取从第12个字符开始到结尾的所有字符</span></span><br><span class="line">$ <span class="built_in">export</span> | cut -c 10-15       <span class="comment"># 截取第10个字符到第15个字符</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用（一）</title>
    <url>/2021/10/23/git_1/</url>
    <content><![CDATA[<p>本文主要记录git中的一些常见概念原理和命令的使用，包含如下内容：</p>
<ul>
<li><a href="#git_init">git仓库初始化</a></li>
<li><a href="#git_add">工作区，暂存区，本地仓库和远程仓库</a></li>
<li><a href="#git_diff">git diff</a></li>
</ul>
<span id="more"></span>
<h3 id="git仓库初始化"><a name="git_init"> 1. git仓库初始化 </a></h3>
<p>构建一个git仓库通常有两种形式，第一种是clone一个已有的git仓库，第二种是将自己的工作目录初始化为一个git仓库。clone一个已有的git仓库可以通过git clone命令加仓库地址来实现，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tensorflow/tensorflow.git</span><br></pre></td></tr></table></figure>
<p>将自己的工作目录初始化为git仓库，通过git init命令实现。首先切换到自己的项目根目录下，然后运行git init命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">&quot;the root dir of your project&quot;</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<p>初始化为git仓库后，项目根目录下会多出一个名为<strong>.git</strong>的影藏文件夹，这个文件夹内记录了关于这个git仓库的所有信息。</p>
<h3 id="工作区暂存区本地仓库和远程仓库"><a name="git_add"> 2. 工作区，暂存区，本地仓库和远程仓库 </a></h3>
<p>工作区，暂存区，本地仓库和远程仓库是git中非常重要的四个概念：</p>
<ul>
<li>工作区（Workspace）：当前工作区域，可以理解为日常编辑工程文件的地方</li>
<li>暂存区（index/stage）：用于临时存放文件的改动情况</li>
<li>本地仓库（Repository）：安全存放数据的地方，这里面包含所有的提交版本的信息，其中HEAD指向最新放入仓库的版本</li>
<li>远程仓库（Remote Repository）：用于托管代码的远程服务器</li>
</ul>
<p>这四者之间关系如下图所示：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/1090617-20181008211557402-232838726.png" alt="img" style="zoom: 67%;" /></p>
<p>git的工作流程一般有如下4步：</p>
<ol type="1">
<li>在工作目录添加或者修改文件</li>
<li>将需要进行版本管理的文件放入暂存区：通过git add命令完成</li>
<li>将暂存区的文件提交至本地仓库：通过git commit命令完成</li>
<li>将本地仓库同步至远程仓库：通过git push命令完成</li>
</ol>
<p>在git工作流程中，一个文件通常具有如下4中状态：</p>
<ul>
<li>Untracked：未跟踪，文件尚未纳入版本管理中，可通过git add变为staged状态</li>
<li>Unmodified：文件已在本地仓库中，但是未被修改，即当前的文件内容与本地仓库中的文件快照中的内容一致。如果对其进行修改，则其变为Modified状态；如果使用git rm移出本地仓库，则变为Untracked状态</li>
<li>Modified：文件被修改了。如果对该文件进行git add，该文件变为staged状态；如果对该文件进行git checkout，则丢弃修改，返回Unmodified状态</li>
<li>Staged：已暂存。执行git commit将修改同步至本地仓库中，文件变为Unmodified状态。执行git reset HEAD [name]取消暂存，文件状态变为Modified。</li>
</ul>
<p>状态变化关系如下图所示：</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/1090617-20181008212040668-1339848607.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>可以使用git status查看文件状态，git status -s可以简略的状态信息，结果如下：</p>
<p><img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211023162808917.png" alt="image-20211023162808917" style="zoom:80%;" /></p>
<p>其中？表示文件尚未被跟踪，M表示文件已被修改，A表示文件被刚纳入版本管理并且已加入至暂存区。共有两列内容，第一列表示暂存区中的状态，第二列表示工作区中的状态。git_1.md为什么在暂存区和工作区都被显示为已修改呢？这是因为：我对git_1.md文件进行修改了之后，将其加入暂存区，然后又对其进行了修改，所以在暂存区和工作区都显示其为已修改状态。</p>
<h3 id="git-diff"><a name="git_diff">3. git diff </a></h3>
<p>git diff用于比较文件之间的差异，通常有如下几种用法：</p>
<ul>
<li>git diff [filename]：用于比较当前工作区和暂存区之间的差异</li>
<li>git diff --cached [filename]：用于比较暂存区和上一次提交之间的差异</li>
<li>git diff HEAD：查看工作区和暂存区与上一次提交之间的差异</li>
<li>git diff commit1 commit2</li>
</ul>
<p>git diff后的结果如下图所示，下面解释各个部分的含义</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211023003548174.png" alt="image-20211023003548174" /><figcaption aria-hidden="true">image-20211023003548174</figcaption>
</figure>
<p>git diff的输出结果大致可以分为两个部分，第一部分是进行对比的两个文件的基本信息，第二部分是对比的结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff --git a/backup.sh b/backup.sh</span><br></pre></td></tr></table></figure>
<p>这一行的意思是使用git版本的diff进行文件对比，对比的两个文件为a版本的backup.sh（即修改前），和b版本的backup.sh（即修改后）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index 7cf56ad..14ff882 100644</span><br></pre></td></tr></table></figure>
<p>这一行表示的是git哈希值，意思是index区域的7cf56ad对象与工作区域的14ff882对象进行对比，100644代表的含义暂不清楚。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--- a/backup.sh</span><br><span class="line">+++ b/backup.sh</span><br></pre></td></tr></table></figure>
<p>这两行表示对比的两个文件，--- a/backup.sh表示修改前的文件，+++ b/backup.sh表示修改后的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@@ -12,5 +12,6 @@ ...</span><br></pre></td></tr></table></figure>
<p>从这行开始就是对差异信息的总结。两个@<span class="citation" data-cites="之间的数字的意思是">@之间的数字的意思是</span>：原文件从12行开始的5行和目标文件从12行开始的6行存在差异，且差异信息显示在后面：</p>
<ul>
<li>以空格开头的白色的行是两个文件中都有的内容</li>
<li>以-开头的的红色的行是原文件中有的内容</li>
<li>以+开头的绿色的行是目标文件中有的内容</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客公式渲染</title>
    <url>/2021/10/25/hexo-equations/</url>
    <content><![CDATA[<p>NexT提供了两个渲染引擎（MathJax和Katex）用来显示公式，本文介绍Hexo NexT主题下配置MathJax进行数学公式渲染。</p>
<span id="more"></span>
<h3 id="安装插件">1. 安装插件</h3>
<p>如果使用MathJax进行公式渲染，需要安装如下两个插件之一：hexo-renderer-pandoc或者hexo-renderer-kramed（不推荐），本文采用hexo-renderer-pandoc，运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save         <span class="comment"># 卸载原有的渲染插件</span></span><br><span class="line">npm install hexo-renderer-pandoc --save           <span class="comment"># 安装hexo-renderer-pandoc插件</span></span><br></pre></td></tr></table></figure>
<p>hexo-renderer-pandoc正常运行还需要安装pandoc软件，软件下载链接如下：<a href="https://github.com/jgm/pandoc/releases">pandoc</a>。安装完成后，重启电脑，使得相关配置生效。</p>
<h3 id="配置">2. 配置</h3>
<p>对next/_config.yml中的math部分进行如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>per_page参数的含义是：是否对每一篇博客都按需进行数学公式渲染。如果设置为false，则默认对每篇博客都进行数学公式渲染。若设置为true，则按需对博客进行数学公式渲染。对于需要开启数学公式渲染的博客，在其Markdown文件的Front-matter部分添加mathjax: true，如下所示：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;!-- This post will render the Math Equations --&gt;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">title: &#x27;Will Render Math&#x27;</span><br><span class="line"><span class="section">mathjax: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>上述两步执行完毕后，执行如下命令，即可正常渲染公式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="注意事项">3. 注意事项</h3>
<ol type="1">
<li>行内数学公式显示（$...$）：在第一个$后和第二个$前，不要有空格，否则无法正常渲染公式。</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令之sed</title>
    <url>/2021/09/26/sed/</url>
    <content><![CDATA[<h3 id="sed简介">1. sed简介</h3>
<p>​ sed是Linux中的流编辑器，与传统的编辑器（如Vim）相比，它没有交互式的界面进行操作，而是通过命令来处理数据流中的数据。sed会对数据做如下操作：</p>
<ol type="1">
<li><p>一次从输入中读取一行数据</p></li>
<li><p>根据提供的命令对数据进行处理（选取，删除，替换，新增）</p></li>
<li><p>将处理后的结果输出至stdout</p></li>
</ol>
<span id="more"></span>
<p>​ sed对一行处理完毕后，会读取下一行并继续进行上述操作，直至将所有的行处理完毕。sed命令的使用格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed options <span class="string">&#x27;actions&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>其中，options为sed命令支持的选项，actions为编辑动作。</p>
<h4 id="options">1.1 options</h4>
<p>sed命令支持的选项和对应的功能如下所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">选项</th>
<th style="text-align: left;">作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">-n</td>
<td style="text-align: left;">silent模式，只有经过sed处理的行会被输出至stdout</td>
</tr>
<tr class="even">
<td style="text-align: center;">-e</td>
<td style="text-align: left;">允许对输入数据应用多条sed命令编辑</td>
</tr>
<tr class="odd">
<td style="text-align: center;">-i</td>
<td style="text-align: left;">用sed修改的结果直接修改读取数据的文件，而不是由屏幕输出</td>
</tr>
<tr class="even">
<td style="text-align: center;">-f</td>
<td style="text-align: left;">从文件中读取编辑命令</td>
</tr>
</tbody>
</table>
<h4 id="actions">1.2 actions</h4>
<p>sed命令支持的编辑动作如下所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">编辑动作</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">a</td>
<td>追加，在当前行后添加一行或多行</td>
</tr>
<tr class="even">
<td style="text-align: center;">c</td>
<td>行替换，用c后面的字符串替换原数据行，可替换多行</td>
</tr>
<tr class="odd">
<td style="text-align: center;">i</td>
<td>插入，在当前行前插入一行或多行</td>
</tr>
<tr class="even">
<td style="text-align: center;">d</td>
<td>删除，删除指定的行</td>
</tr>
<tr class="odd">
<td style="text-align: center;">p</td>
<td>打印，输出指定的行</td>
</tr>
<tr class="even">
<td style="text-align: center;">s</td>
<td>字符串替换，用一个字符串替换另一个字符串</td>
</tr>
</tbody>
</table>
<h4 id="sed寻址方式">1.3 sed寻址方式</h4>
<p>在默认情况下，sed命令会对所有行进行相同的操作，但是，某些时候，我们只想对输入数据的部分行进行操作，这个时候则需要进行寻址。sed命令支持两种寻址方式：</p>
<ul>
<li>以数字形式表示行区间</li>
<li>用文本模式进行匹配过滤</li>
</ul>
<p><strong>A. 以数字形式表示行区间</strong></p>
<p>我们可以使用数字来指定处理的行，可以是指定特定的某一行，也可以是指定某个行区间。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印第三行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;3p&#x27;</span> file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第三到五行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;3,5p&#x27;</span> file.txt</span><br></pre></td></tr></table></figure>
<p>指定行区间，则是用起始行号，逗号以及结尾行号来表示一定区间范围内的行。需要注意的是，sed中对于行的编号是从1开始的。</p>
<p><strong>B.以文本模式进行匹配过滤</strong></p>
<p>sed命令也允许指定文本模式来过滤出命令要作用的行，格式如下：/pattern/actions。sed命令会过滤出包含pattern的行，并用actions对这些行进行处理</p>
<p>例如，只想打印出/etc/passwd文件中包含/bin/bash的行，则可以使用如下的sed命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/\/bin\/bash/p&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<p>当然，使用grep命令可以更简单的实现相同的效果。此处，举这个例子来演示sed命令的文本匹配过滤功能。</p>
<h3 id="sed之打印p">2. sed之打印(p)</h3>
<p>sed进行打印时，常与-n一同使用，只打印符号条件的行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;2p&#x27;</span> test.txt           <span class="comment"># 打印第2行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;2,4p&#x27;</span> test.txt         <span class="comment"># 打印第2到4行</span></span><br><span class="line">$ sed -n <span class="string">&#x27;/hello/p&#x27;</span> test.txt     <span class="comment"># 打印包含hello的行</span></span><br></pre></td></tr></table></figure>
<h3 id="sed之追加a插入i删除d">3. sed之追加(a)，插入(i)，删除(d)</h3>
<p>使用a进行追加时，可以追加1行，也可以使用“  ”追加多行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2a hello world&#x27;</span> test.txt      <span class="comment"># 在第2行后添加一行hello world</span></span><br><span class="line">$ sed <span class="string">&#x27;2a hello\</span></span><br><span class="line"><span class="string">&gt; world&#x27;</span> test.txt                    <span class="comment"># 在第二行后添加2行，分别为hello和world</span></span><br></pre></td></tr></table></figure>
<p>i的用法与a的用法类似，不同的是i是在指定的行前进行插入，a是在指定的行后追加。</p>
<p>d可以用来删除指定的某一行，或者某个范围内的行，或者使用模式进行匹配删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2d&#x27;</span> test.txt                 <span class="comment"># 删除第2行</span></span><br><span class="line">$ sed <span class="string">&#x27;3,5d&#x27;</span> test.txt               <span class="comment"># 删除第3到5行</span></span><br><span class="line">$ sed <span class="string">&#x27;/hello/d&#x27;</span> test.txt           <span class="comment"># 删除匹配到hello的行</span></span><br></pre></td></tr></table></figure>
<h3 id="sed之行替换c">4. sed之行替换(c)</h3>
<p>使用c可以对指定的行进行替换，可以替换一行，也可以替换多行，替换的内容可以是一行，也可以是多行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2c hello world&#x27;</span> test.txt          <span class="comment"># 将第2行替换为hello world</span></span><br><span class="line">$ sed <span class="string">&#x27;2,3c hello world&#x27;</span> test.txt        <span class="comment"># 将第2到第3行替换为hello world</span></span><br><span class="line">$ sed <span class="string">&#x27;2,3c hello world1\</span></span><br><span class="line"><span class="string">&gt; hello world2&#x27;</span> test.txt                 <span class="comment"># 将第2到3行替换为两行内容</span></span><br><span class="line">$ sed <span class="string">&#x27;/hello/c c_hello&#x27;</span> test.txt        <span class="comment"># 对包含hello的行进行替换</span></span><br></pre></td></tr></table></figure>
<h3 id="sed之字符串替换s">5. sed之字符串替换(s)</h3>
<p>使用s进行字符串替换时的格式如下：s/pattern/replacement/flags</p>
<p>有4中可用的标记（flag），作用分别如下：</p>
<ul>
<li>数字：表明新文本将替换第几处模式匹配的地方</li>
<li>g：表明新文本将会替换所有匹配的文本</li>
<li>p：表明将进行了替换操作的行打印出来</li>
<li>w：将行替换的结果写到文件中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/test/trail/2&#x27;</span> test.txt     <span class="comment"># 只替换每行第2次匹配到的文本</span></span><br><span class="line">$ sed <span class="string">&#x27;s/test/trail/g&#x27;</span> test.txt     <span class="comment"># 替换所有匹配到的文本</span></span><br><span class="line">$ sed -n <span class="string">&#x27;s/test/trail/p&#x27;</span> test.txt  <span class="comment"># 将被替换的行打印出来</span></span><br><span class="line">$ sed <span class="string">&#x27;s/test/trail/w result.txt&#x27;</span> test.txt <span class="comment"># 将行替换的结果写入文件</span></span><br></pre></td></tr></table></figure>
<p>注意：可以将上述flags进行组合使用，达到效果的叠加。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加文本字数和阅读时间统计</title>
    <url>/2021/10/10/hexo-word-count/</url>
    <content><![CDATA[<p>给Hexo添加字数统计和阅读时间统计主要涉及到hexo-wordcount，hexo-symbol-count-time和eslint这三个插件的安装，以及相关配置文件的修改。步骤不复杂，按照步骤操作就可以。</p>
<span id="more"></span>
<h3 id="插件安装">1. 插件安装</h3>
<p>实现字数统计和阅读统计涉及到三个插件（hexo-wordcount，hexo-symbols-count-time，eslint），安装命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-wordcount</span> -<span class="literal">-save</span></span><br><span class="line">npm install hexo<span class="literal">-symbols</span><span class="literal">-count</span><span class="literal">-time</span> -<span class="literal">-save</span></span><br><span class="line">npm install eslint -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<h3 id="配置文件设置">2. 配置文件设置</h3>
<p>配置文件涉及到两个，分别是站点配置文件和主题配置文件。站点配置文件为博客根目录下的_config.yml文件，主题配置文件为主题文件夹内的_config.yml文件。</p>
<h4 id="站点配置文件">2.1 站点配置文件</h4>
<p>在站点配置文件中添加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                         <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                            <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span>                  <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span>                     <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>              <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure>
<h4 id="主题配置文件">2.2 主题配置文件</h4>
<p>主题配置文件涉及到两处修改，第一处为symbol_count_time，该处原配置文件中已有，只需按照如下内容修改即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span>          <span class="comment"># 是否另起一行，true表示不和发表时间一行</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>           <span class="comment"># 是否显示文字描述（本文字数，阅读时长）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>         <span class="comment"># 页面底部是否显示文字描述</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                         <span class="comment"># 每个word的平均长度</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>                       <span class="comment"># 每分钟阅读的word</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins</span>                   <span class="comment"># 单位后缀</span></span><br></pre></td></tr></table></figure>
<p>第二处为post_wordcount，此处原配置文件中不包含，可在配置文件最后自行添加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span>                 <span class="comment"># 是否显示文字</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span>                 <span class="comment"># 是否显示字数</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span>                  <span class="comment"># 是否显示阅读时间</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">false</span>               <span class="comment"># 是否显示站点总数</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span>           <span class="comment"># 是否分离</span></span><br></pre></td></tr></table></figure>
<h3 id="效果">3. 效果</h3>
<p>完成全部设置后，效果如下图所示：</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211010215632724.png" alt="image-20211010215632724" /><figcaption aria-hidden="true">image-20211010215632724</figcaption>
</figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>线性回归与非线性回归</title>
    <url>/2021/10/24/linear-nonlinear-regression/</url>
    <content><![CDATA[<p>最近在看矩阵分析中的投影矩阵，进而区看了最小二乘法，然后有学习了线性回归和非线性回归，发现和自己的认知不太一样，在这里总结一下线性回归和非线性回归的概念。</p>
<p>线性回归和非线性回归中，线性和非线性的意思并不是用来描述因变量和自变量之间的关系是线性还是非线性的，而是用来描述模型函数与待估计参数之间的关系。我们首先来看非线性回归，明白了非线性回归，自然就知道线性回归的含义了。</p>
<span id="more"></span>
<h3 id="非线性回归">1. 非线性回归</h3>
<p>我们首先来看维基百科中对于非线性回归的定义：</p>
<p>In statistics, <a href="https://en.wikipedia.org/wiki/Nonlinear_regression"><strong>nonlinear regression</strong></a> is a form of regression analysis in which observational data are modeled by a function which is a nonlinear combination of the model parameters and depends on one or more independent variables.</p>
<p>这段话的意思是：非线性回归是采用一个函数模型对观测数据进行建模，并且该函数是由<strong>模型参数的非线性组合</strong>构成的，并且可以通过观测数据（自变量和因变量）对模型参数进行估计。</p>
<p>这里需要注意的是：非线性估计中的非线性指的是模型函数是由<strong>模型参数的非线性组合</strong>构成，而并不是描述函数和自变量之间的关系。</p>
<p>举个例子，我们采用如下的模型：</p>
<p><span class="math display">\[
\mathbf{y} \sim f(\mathbf{x},\mathbf{\beta})
\]</span> 其中，<span class="math inline">\(\mathbf{x}=\{x_1,x_2,\cdots,x_n\}\)</span> 为自变量向量，<span class="math inline">\(\mathbf{y}=\{y_1,y_2,\cdots,y_n\}\)</span>为观测因变量向量，<span class="math inline">\(\mathbf{\beta}=\{\beta_1,\beta_2,\cdots,\beta_n\}\)</span>为模型参数向量。</p>
<p>假设某个模型由一个自变量，和两个参数构成，即： <span class="math display">\[
f(\mathbf{x},\mathbf{\beta})=\frac{\beta_1x}{\beta_2+x}
\]</span> 显然，函数模型<span class="math inline">\(f\)</span>无法表示成模型参数<span class="math inline">\(\beta_1\)</span>和<span class="math inline">\(\beta_2\)</span>的线性组合，因此，这个函数是非线性的。</p>
<h3 id="线性回归">2. 线性回归</h3>
<p>如果我们考虑如下的模型： <span class="math display">\[
f(\mathbf{x},\mathbf{\beta})=\beta_0+\beta_1x_1+\beta_2x_2^2+\cdots+\beta_nx_n^2
\]</span> 这看似是一个非线性函数，但是实际上，函数<span class="math inline">\(f\)</span>对于模型参数<span class="math inline">\(\{\beta_0,\beta_1,\cdots,\beta_n\}\)</span>而言是线性的，即是由<span class="math inline">\(\{\beta_0,\beta_1,\cdots,\beta_n\}\)</span>的线性组合构成的，系数分别为<span class="math inline">\(1,x_1,x_2,\cdots,x_n\)</span>。因此，这个函数是线性的。</p>
<h3 id="总结">3. 总结</h3>
<p>线性还是非线性是要根据分析的目标来决定的，在线性回归和非线性回归中，我们需要求解的是模型参数，因而，线性与非线性描述的是函数模型与模型参数之间的关系，而非因变量与自变量之间的关系。</p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>linear regression</tag>
        <tag>non-linear regression</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令之tar</title>
    <url>/2021/10/10/tar/</url>
    <content><![CDATA[<p>tar命令可以将多个文件和目录打包成一个大的文件，并结合gzip/bzip2进行压缩。本文首先介绍常用的压缩命令，然后介绍tar命令。</p>
<span id="more"></span>
<h3 id="常用压缩命令">1.常用压缩命令</h3>
<p>Linux上的压缩命令非常多，不同的压缩命令对应不同的扩展名。因此，需要知道常见的扩展名所对应的压缩命令，才能使用相应的压缩命令对其进行解压缩。</p>
<table>
<thead>
<tr class="header">
<th>扩展名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.gz</td>
<td>gzip程序的压缩文件</td>
</tr>
<tr class="even">
<td>.bz2</td>
<td>bzip2程序的压缩文件</td>
</tr>
<tr class="odd">
<td>.tar</td>
<td>tar程序的打包文件，并没有经过压缩</td>
</tr>
<tr class="even">
<td>.tar.gz</td>
<td>tar程序的打包文件，并经过gzip的压缩</td>
</tr>
<tr class="odd">
<td>.tar.bz2</td>
<td>tar程序的打包文件，并经过bzip2的压缩</td>
</tr>
</tbody>
</table>
<h4 id="gzip">1.1 gzip</h4>
<p>gzip命令的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip [-cdtv<span class="comment">#] filename</span></span><br></pre></td></tr></table></figure>
<p>各个选项的含义如下：</p>
<ul>
<li>-c：将压缩后的数据输出的屏幕上，可以结合重定向进行使用</li>
<li>-d：解压缩</li>
<li>-t：校验压缩文件是否正确无误</li>
<li>-v：对文件进行压缩，并显示压缩比</li>
<li>-#：通过数字指定压缩等级，-1最快，但是压缩比最低；-9最慢，但是压缩比最高。默认为6</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip test.txt             <span class="comment"># 压缩test.txt，并生成test.txt.gz</span></span><br><span class="line">$ gzip -c test.txt          <span class="comment"># 输出test.txt压缩后的信息，并不产生test.txt.gz</span></span><br><span class="line">$ gzip -d test.txt.gz       <span class="comment"># 解压test.txt.gz</span></span><br><span class="line">$ gzip -v test.txt          <span class="comment"># 对test.txt进行压缩，并显示压缩比</span></span><br><span class="line">$ gzip -9 test.txt          <span class="comment"># 以压缩等级9对test.txt进行压缩</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，使用gzip对文件压缩或者解压缩时，均不会保留原文件或者压缩文件，如果想要保留原始文件，可以结合-c选项和重定向，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip -c test.txt &gt; test.txt.gz  <span class="comment"># 将屏幕输出重定向至test.txt.gz，从而保留原文件 </span></span><br><span class="line">$ gzip -<span class="built_in">cd</span> test.txt.gz &gt; test.txt <span class="comment"># 将解压信息重定向至test.txt，从而保留原文件</span></span><br></pre></td></tr></table></figure>
<p>上述选项也可结合使用，实现综合功能，如：</p>
<ul>
<li><p>比较不同压缩等级下的压缩比</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip -cv1 test.txt     <span class="comment"># 显示压缩信息和压缩等级，并不产生压缩文件</span></span><br><span class="line">$ gzip -cv9 test.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<p>需要注意的是，gzip是对单个文件的压缩，并不能对整个目录进行压缩。虽然可以通过-r选项来对目录进行操作，但这也只是对目录里的文件分别进行压缩。</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211010163234547.png" alt="image-20211010163234547" /><figcaption aria-hidden="true">image-20211010163234547</figcaption>
</figure>
<h4 id="bzip2">1.2 bzip2</h4>
<p>bzip2的用法几乎与gzip相同，bzip2命令的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bzip2 [-cdkzv$] filename</span><br></pre></td></tr></table></figure>
<p>各个选项的作用如下：</p>
<ul>
<li>-c：将压缩过程产生的数据输出至屏幕上</li>
<li>-d：解压缩</li>
<li>-k：保留原文件</li>
<li>-z：压缩的参数</li>
<li>-v：显示压缩比信息</li>
<li>-#：与gzip相同，压缩参数，1最快，9压缩比最高</li>
</ul>
<p>相比gzip，bzip2提供了-k选项，在压缩文件的同时，可以保留原文件。当然也可以使用-c选项和重定向来实现，不过这显得有些麻烦了。</p>
<p>和gzip一样，bzip2也仅能对单个文件进行压缩，而无法对多个文件或者文件夹进行压缩。</p>
<h3 id="tar命令">2. tar命令</h3>
<p>tar是Linux中的归档命令，用于打包多个文件，并且可以结合压缩命令进行使用，tar命令的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar [-j|-z] [cv] [-f new_filename] object1 object2 ...    <span class="comment"># 压缩</span></span><br><span class="line">$ tar [-j|-z] [tv] [-f new_filename]         <span class="comment"># 查看文件名</span></span><br><span class="line">$ tar [-j|-z] [xv] [-f new_filename] [-C folder]            <span class="comment"># 解压</span></span><br></pre></td></tr></table></figure>
<p>这些常用选项的作用如下：</p>
<ul>
<li>-c：新建打包文件，结合-v可以查看打包过程中的文件</li>
<li>-t：查看打包文件中包含的文件名，结合-v可以显示文件的详细信息</li>
<li>-x：解打包或者解压缩，注意：-c，-t，-x不可能在命令中同时出现</li>
<li>-j：通过bzip2的支持进行压缩和解压缩，此时文件扩展名为*.tar.bz2</li>
<li>-z：通过gzip的支持进行压缩和解压缩，此时文件扩展名为*.tar.gz</li>
<li>-f：后面跟打包文件的名字，建议单独出来写</li>
<li>-C：指定解打包的目录</li>
</ul>
<p>实际比较常用的打包，查看和解打包涉及到的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -jcv -f all_test.tar.bz2 <span class="built_in">test</span>*.txt      <span class="comment"># 使用bzip2进行压缩</span></span><br><span class="line">$ tar -zcv -f all_test.tar.gz <span class="built_in">test</span>*.txt       <span class="comment"># 使用gzip进行压缩</span></span><br><span class="line">$ tar -jtv -f all_test.tar.bz2                <span class="comment"># 查看打包文件名</span></span><br><span class="line">$ tar -ztv -f all_test.tar.gz                 <span class="comment"># 查看打包文件名</span></span><br><span class="line">$ tar -jxv -f all_test.tar.bz2                <span class="comment"># 解打包*.tar.bz2</span></span><br><span class="line">$ tar -zxv -f all_test.tar.gz                 <span class="comment"># 解打包*.tar.gz</span></span><br><span class="line">$ tar -zxv -f all_test.tar.gz -C target_folder/    <span class="comment"># 指定目录解打包</span></span><br></pre></td></tr></table></figure>
<p>tar还有两个比较常用的功能：</p>
<ul>
<li><p>解打包某一个文件</p>
<p>使用上述的解打包命令时，会把所有的文件都解出来，但有时候我们可能只需要其中的某个文件，这时候可以指定需要的文件，用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -jxv -f filename.tar.bz2 -C targer_folder file1</span><br></pre></td></tr></table></figure>
<p>其中，filename.tar.bz2为需要解打包的文件，file1为需要的目标文件，targer_folder为目标目录。</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211010174744834.png" alt="image-20211010174744834" /><figcaption aria-hidden="true">image-20211010174744834</figcaption>
</figure></li>
<li><p>打包时，排除某些文件</p>
<p>可以使用--exclude来排除不需要打包的文件，示例如下：</p>
<figure>
<img src="https://jxliu-picbed.oss-cn-shanghai.aliyuncs.com/img/image-20211010175823219.png" alt="image-20211010175823219" /><figcaption aria-hidden="true">image-20211010175823219</figcaption>
</figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>数据流重定向</title>
    <url>/2021/10/12/%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h3 id="数据流">1.数据流</h3>
<p>Linux中涉及到的数据流有如下三个：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">设备</th>
<th style="text-align: center;">设备文件名</th>
<th style="text-align: center;">文件描述符</th>
<th style="text-align: center;">类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">键盘</td>
<td style="text-align: center;">/dev/stdin</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">标准输入</td>
</tr>
<tr class="even">
<td style="text-align: center;">显示器</td>
<td style="text-align: center;">/dev/stdout</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">标准输出</td>
</tr>
<tr class="odd">
<td style="text-align: center;">显示器</td>
<td style="text-align: center;">/dev/stderr</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">错误标准输出</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h3 id="输出重定向">2. 输出重定向</h3>
<p>输出重定向实在Linux中使用较多的，可以将其理解为将标准输出（包括标准输出和标准错误输出）存入一个文件中，而不是显示在屏幕上。这样有什么作用呢？比如我们执行一个bash脚本，我们可能无法实时在屏幕前看脚本的输出，或者脚本的输出很多，我们一时也看不过来。这个时候就可以使用输出重定向，将脚本执行过程中的输出记录至文件中。脚本执行结束后，直接去查看记录文件中的内容，就可以知道脚本的执行情况。</p>
<p>输出重定向使用分为标准输出重定向和标准错误输出重定向，标准输出重定向使用&gt;或者&gt;&gt;，标准错误输出使用2&gt;或者2&gt;&gt;，分别对应如下4种情况：</p>
<ul>
<li>&gt;：以覆盖的方式将标准输出存放至指定的文件或设备</li>
<li>&gt;&gt;：以追加的方式将标准输出存放至指定的文件或设备</li>
<li>2&gt;：以覆盖的方式将标准错误输出存放至指定的文件或设备</li>
<li>2&gt;&gt;：以追加的方式将标准错误输出存放至指定的文件或设备</li>
</ul>
<h4 id="技巧1将stdout和stderr输出至不同的文件">2.1 技巧1：将stdout和stderr输出至不同的文件</h4>
<p>有时候我们不知道一条命令的执行结果是正确的还是错误的，这个时候我们可以将stdout和stderr分别重定向至不同的文件中，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home -name .bashrc &gt; list_right 2&gt; list_error</span><br></pre></td></tr></table></figure>
<h4 id="技巧2将stdout和stderr输出至同一个文件">2.2 技巧2：将stdout和stderr输出至同一个文件</h4>
<p>stdin和stderr输出至不同的文件一方面查看不方便，另一方面也无法体现出输出的先后顺序，可以将这二者输出至同一个文件中，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home -name .bashrc &gt; <span class="built_in">log</span> 2&gt;&amp;1     <span class="comment"># 方法1</span></span><br><span class="line">$ find /home -name .bashrc &amp;&gt;             <span class="comment"># 方法2</span></span><br></pre></td></tr></table></figure>
<h4 id="技巧3devnull">2.3 技巧3：/dev/null</h4>
<p>有时我们知道错误会发生，但是想将它忽略，这时候黑洞设备/dev/null就很重要了，/dev/null会吃掉任何导向至这个设备的信息，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home -name .bashrc 2&gt; /dev/null       <span class="comment"># 将错误信息丢弃 </span></span><br></pre></td></tr></table></figure>
<h3 id="输入重定向">3. 输入重定向</h3>
<p>输入重定向可以理解为将原来需要由键盘进行输入的数据改由文件输入，使用&lt;，如法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt; file</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
</search>
